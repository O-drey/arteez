// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  firstname     String
  lastname      String
  email         String            @unique
  password      String
  username      String?           @unique
  bio           String?
  dob           DateTime?
  favoritesArts Arts[]
  collections   ArtsCollections[]
}

model Image {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  url  String
  Arts Arts[]
}

model Author {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstname String
  lastname  String?
  arts      Arts[]   @relation(fields: [artsId], references: [id])
  artsId    String[] @db.ObjectId
}

model Arts {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  title             String?
  img               Image           @relation(fields: [imageId], references: [id])
  author            Author[]        @relation(fields: [authorId], references: [id])
  authorId          String[]        @db.ObjectId
  date              DateTime
  annotation        String?
  User              User?           @relation(fields: [userId], references: [id])
  userId            String?         @db.ObjectId
  imageId           String          @db.ObjectId
  ArtsCollections   ArtsCollections @relation(fields: [artsCollectionsId], references: [id])
  artsCollectionsId String[]        @db.ObjectId
}

model ArtsCollections {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  User   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  arts   Arts[]
  artsId String @db.ObjectId
}
