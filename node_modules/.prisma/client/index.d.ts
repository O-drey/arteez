
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Image
 * 
 */
export type Image = $Result.DefaultSelection<Prisma.$ImagePayload>
/**
 * Model Author
 * 
 */
export type Author = $Result.DefaultSelection<Prisma.$AuthorPayload>
/**
 * Model Arts
 * 
 */
export type Arts = $Result.DefaultSelection<Prisma.$ArtsPayload>
/**
 * Model ArtsCollections
 * 
 */
export type ArtsCollections = $Result.DefaultSelection<Prisma.$ArtsCollectionsPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.author`: Exposes CRUD operations for the **Author** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Authors
    * const authors = await prisma.author.findMany()
    * ```
    */
  get author(): Prisma.AuthorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.arts`: Exposes CRUD operations for the **Arts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Arts
    * const arts = await prisma.arts.findMany()
    * ```
    */
  get arts(): Prisma.ArtsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.artsCollections`: Exposes CRUD operations for the **ArtsCollections** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArtsCollections
    * const artsCollections = await prisma.artsCollections.findMany()
    * ```
    */
  get artsCollections(): Prisma.ArtsCollectionsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Image: 'Image',
    Author: 'Author',
    Arts: 'Arts',
    ArtsCollections: 'ArtsCollections'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "image" | "author" | "arts" | "artsCollections"
      txIsolationLevel: never
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Image: {
        payload: Prisma.$ImagePayload<ExtArgs>
        fields: Prisma.ImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findFirst: {
            args: Prisma.ImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findMany: {
            args: Prisma.ImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          create: {
            args: Prisma.ImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          createMany: {
            args: Prisma.ImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          update: {
            args: Prisma.ImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          deleteMany: {
            args: Prisma.ImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.ImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ImageFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ImageAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ImageCountArgs<ExtArgs>
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
      Author: {
        payload: Prisma.$AuthorPayload<ExtArgs>
        fields: Prisma.AuthorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuthorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload>
          }
          findFirst: {
            args: Prisma.AuthorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload>
          }
          findMany: {
            args: Prisma.AuthorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload>[]
          }
          create: {
            args: Prisma.AuthorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload>
          }
          createMany: {
            args: Prisma.AuthorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AuthorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload>
          }
          update: {
            args: Prisma.AuthorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload>
          }
          deleteMany: {
            args: Prisma.AuthorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuthorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuthorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthorPayload>
          }
          aggregate: {
            args: Prisma.AuthorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuthor>
          }
          groupBy: {
            args: Prisma.AuthorGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuthorGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AuthorFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.AuthorAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.AuthorCountArgs<ExtArgs>
            result: $Utils.Optional<AuthorCountAggregateOutputType> | number
          }
        }
      }
      Arts: {
        payload: Prisma.$ArtsPayload<ExtArgs>
        fields: Prisma.ArtsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArtsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArtsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsPayload>
          }
          findFirst: {
            args: Prisma.ArtsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArtsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsPayload>
          }
          findMany: {
            args: Prisma.ArtsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsPayload>[]
          }
          create: {
            args: Prisma.ArtsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsPayload>
          }
          createMany: {
            args: Prisma.ArtsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ArtsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsPayload>
          }
          update: {
            args: Prisma.ArtsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsPayload>
          }
          deleteMany: {
            args: Prisma.ArtsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArtsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArtsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsPayload>
          }
          aggregate: {
            args: Prisma.ArtsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArts>
          }
          groupBy: {
            args: Prisma.ArtsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArtsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ArtsFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ArtsAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ArtsCountArgs<ExtArgs>
            result: $Utils.Optional<ArtsCountAggregateOutputType> | number
          }
        }
      }
      ArtsCollections: {
        payload: Prisma.$ArtsCollectionsPayload<ExtArgs>
        fields: Prisma.ArtsCollectionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArtsCollectionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsCollectionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArtsCollectionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsCollectionsPayload>
          }
          findFirst: {
            args: Prisma.ArtsCollectionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsCollectionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArtsCollectionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsCollectionsPayload>
          }
          findMany: {
            args: Prisma.ArtsCollectionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsCollectionsPayload>[]
          }
          create: {
            args: Prisma.ArtsCollectionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsCollectionsPayload>
          }
          createMany: {
            args: Prisma.ArtsCollectionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ArtsCollectionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsCollectionsPayload>
          }
          update: {
            args: Prisma.ArtsCollectionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsCollectionsPayload>
          }
          deleteMany: {
            args: Prisma.ArtsCollectionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArtsCollectionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArtsCollectionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtsCollectionsPayload>
          }
          aggregate: {
            args: Prisma.ArtsCollectionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArtsCollections>
          }
          groupBy: {
            args: Prisma.ArtsCollectionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArtsCollectionsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ArtsCollectionsFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ArtsCollectionsAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ArtsCollectionsCountArgs<ExtArgs>
            result: $Utils.Optional<ArtsCollectionsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    image?: ImageOmit
    author?: AuthorOmit
    arts?: ArtsOmit
    artsCollections?: ArtsCollectionsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    favoritesArts: number
    collections: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favoritesArts?: boolean | UserCountOutputTypeCountFavoritesArtsArgs
    collections?: boolean | UserCountOutputTypeCountCollectionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoritesArtsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCollectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtsCollectionsWhereInput
  }


  /**
   * Count Type ImageCountOutputType
   */

  export type ImageCountOutputType = {
    Arts: number
  }

  export type ImageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Arts?: boolean | ImageCountOutputTypeCountArtsArgs
  }

  // Custom InputTypes
  /**
   * ImageCountOutputType without action
   */
  export type ImageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageCountOutputType
     */
    select?: ImageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ImageCountOutputType without action
   */
  export type ImageCountOutputTypeCountArtsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtsWhereInput
  }


  /**
   * Count Type AuthorCountOutputType
   */

  export type AuthorCountOutputType = {
    arts: number
  }

  export type AuthorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arts?: boolean | AuthorCountOutputTypeCountArtsArgs
  }

  // Custom InputTypes
  /**
   * AuthorCountOutputType without action
   */
  export type AuthorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuthorCountOutputType
     */
    select?: AuthorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AuthorCountOutputType without action
   */
  export type AuthorCountOutputTypeCountArtsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtsWhereInput
  }


  /**
   * Count Type ArtsCountOutputType
   */

  export type ArtsCountOutputType = {
    author: number
  }

  export type ArtsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | ArtsCountOutputTypeCountAuthorArgs
  }

  // Custom InputTypes
  /**
   * ArtsCountOutputType without action
   */
  export type ArtsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtsCountOutputType
     */
    select?: ArtsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArtsCountOutputType without action
   */
  export type ArtsCountOutputTypeCountAuthorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthorWhereInput
  }


  /**
   * Count Type ArtsCollectionsCountOutputType
   */

  export type ArtsCollectionsCountOutputType = {
    arts: number
  }

  export type ArtsCollectionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arts?: boolean | ArtsCollectionsCountOutputTypeCountArtsArgs
  }

  // Custom InputTypes
  /**
   * ArtsCollectionsCountOutputType without action
   */
  export type ArtsCollectionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtsCollectionsCountOutputType
     */
    select?: ArtsCollectionsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArtsCollectionsCountOutputType without action
   */
  export type ArtsCollectionsCountOutputTypeCountArtsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    firstname: string | null
    lastname: string | null
    email: string | null
    password: string | null
    username: string | null
    bio: string | null
    dob: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    firstname: string | null
    lastname: string | null
    email: string | null
    password: string | null
    username: string | null
    bio: string | null
    dob: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstname: number
    lastname: number
    email: number
    password: number
    username: number
    bio: number
    dob: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    password?: true
    username?: true
    bio?: true
    dob?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    password?: true
    username?: true
    bio?: true
    dob?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    password?: true
    username?: true
    bio?: true
    dob?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    firstname: string
    lastname: string
    email: string
    password: string
    username: string | null
    bio: string | null
    dob: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    email?: boolean
    password?: boolean
    username?: boolean
    bio?: boolean
    dob?: boolean
    favoritesArts?: boolean | User$favoritesArtsArgs<ExtArgs>
    collections?: boolean | User$collectionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    email?: boolean
    password?: boolean
    username?: boolean
    bio?: boolean
    dob?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstname" | "lastname" | "email" | "password" | "username" | "bio" | "dob", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favoritesArts?: boolean | User$favoritesArtsArgs<ExtArgs>
    collections?: boolean | User$collectionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      favoritesArts: Prisma.$ArtsPayload<ExtArgs>[]
      collections: Prisma.$ArtsCollectionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstname: string
      lastname: string
      email: string
      password: string
      username: string | null
      bio: string | null
      dob: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: UserFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    favoritesArts<T extends User$favoritesArtsArgs<ExtArgs> = {}>(args?: Subset<T, User$favoritesArtsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    collections<T extends User$collectionsArgs<ExtArgs> = {}>(args?: Subset<T, User$collectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtsCollectionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly firstname: FieldRef<"User", 'String'>
    readonly lastname: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly dob: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User.favoritesArts
   */
  export type User$favoritesArtsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arts
     */
    select?: ArtsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arts
     */
    omit?: ArtsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsInclude<ExtArgs> | null
    where?: ArtsWhereInput
    orderBy?: ArtsOrderByWithRelationInput | ArtsOrderByWithRelationInput[]
    cursor?: ArtsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtsScalarFieldEnum | ArtsScalarFieldEnum[]
  }

  /**
   * User.collections
   */
  export type User$collectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtsCollections
     */
    select?: ArtsCollectionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArtsCollections
     */
    omit?: ArtsCollectionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsCollectionsInclude<ExtArgs> | null
    where?: ArtsCollectionsWhereInput
    orderBy?: ArtsCollectionsOrderByWithRelationInput | ArtsCollectionsOrderByWithRelationInput[]
    cursor?: ArtsCollectionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtsCollectionsScalarFieldEnum | ArtsCollectionsScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageMinAggregateOutputType = {
    id: string | null
    url: string | null
  }

  export type ImageMaxAggregateOutputType = {
    id: string | null
    url: string | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    url: number
    _all: number
  }


  export type ImageMinAggregateInputType = {
    id?: true
    url?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    url?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    url?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Image to aggregate.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithAggregationInput | ImageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    id: string
    url: string
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    Arts?: boolean | Image$ArtsArgs<ExtArgs>
    _count?: boolean | ImageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>



  export type ImageSelectScalar = {
    id?: boolean
    url?: boolean
  }

  export type ImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "url", ExtArgs["result"]["image"]>
  export type ImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Arts?: boolean | Image$ArtsArgs<ExtArgs>
    _count?: boolean | ImageCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Image"
    objects: {
      Arts: Prisma.$ArtsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
    }, ExtArgs["result"]["image"]>
    composites: {}
  }

  type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = $Result.GetResult<Prisma.$ImagePayload, S>

  type ImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface ImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImageFindUniqueArgs>(args: SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Image that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImageFindFirstArgs>(args?: SelectSubset<T, ImageFindFirstArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ImageFindManyArgs>(args?: SelectSubset<T, ImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
     */
    create<T extends ImageCreateArgs>(args: SelectSubset<T, ImageCreateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Images.
     * @param {ImageCreateManyArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImageCreateManyArgs>(args?: SelectSubset<T, ImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
     */
    delete<T extends ImageDeleteArgs>(args: SelectSubset<T, ImageDeleteArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImageUpdateArgs>(args: SelectSubset<T, ImageUpdateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImageDeleteManyArgs>(args?: SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImageUpdateManyArgs>(args: SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
     */
    upsert<T extends ImageUpsertArgs>(args: SelectSubset<T, ImageUpsertArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Images that matches the filter.
     * @param {ImageFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const image = await prisma.image.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ImageFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Image.
     * @param {ImageAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const image = await prisma.image.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ImageAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Image model
   */
  readonly fields: ImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Arts<T extends Image$ArtsArgs<ExtArgs> = {}>(args?: Subset<T, Image$ArtsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Image model
   */
  interface ImageFieldRefs {
    readonly id: FieldRef<"Image", 'String'>
    readonly url: FieldRef<"Image", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findMany
   */
  export type ImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image create
   */
  export type ImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to create a Image.
     */
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }

  /**
   * Image createMany
   */
  export type ImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
  }

  /**
   * Image update
   */
  export type ImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to update a Image.
     */
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
  }

  /**
   * Image upsert
   */
  export type ImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The filter to search for the Image to update in case it exists.
     */
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     */
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }

  /**
   * Image delete
   */
  export type ImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter which Image to delete.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to delete.
     */
    limit?: number
  }

  /**
   * Image findRaw
   */
  export type ImageFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Image aggregateRaw
   */
  export type ImageAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Image.Arts
   */
  export type Image$ArtsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arts
     */
    select?: ArtsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arts
     */
    omit?: ArtsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsInclude<ExtArgs> | null
    where?: ArtsWhereInput
    orderBy?: ArtsOrderByWithRelationInput | ArtsOrderByWithRelationInput[]
    cursor?: ArtsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtsScalarFieldEnum | ArtsScalarFieldEnum[]
  }

  /**
   * Image without action
   */
  export type ImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
  }


  /**
   * Model Author
   */

  export type AggregateAuthor = {
    _count: AuthorCountAggregateOutputType | null
    _min: AuthorMinAggregateOutputType | null
    _max: AuthorMaxAggregateOutputType | null
  }

  export type AuthorMinAggregateOutputType = {
    id: string | null
    firstname: string | null
    lastname: string | null
  }

  export type AuthorMaxAggregateOutputType = {
    id: string | null
    firstname: string | null
    lastname: string | null
  }

  export type AuthorCountAggregateOutputType = {
    id: number
    firstname: number
    lastname: number
    artsId: number
    _all: number
  }


  export type AuthorMinAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
  }

  export type AuthorMaxAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
  }

  export type AuthorCountAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    artsId?: true
    _all?: true
  }

  export type AuthorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Author to aggregate.
     */
    where?: AuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authors to fetch.
     */
    orderBy?: AuthorOrderByWithRelationInput | AuthorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Authors
    **/
    _count?: true | AuthorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthorMaxAggregateInputType
  }

  export type GetAuthorAggregateType<T extends AuthorAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthor[P]>
      : GetScalarType<T[P], AggregateAuthor[P]>
  }




  export type AuthorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthorWhereInput
    orderBy?: AuthorOrderByWithAggregationInput | AuthorOrderByWithAggregationInput[]
    by: AuthorScalarFieldEnum[] | AuthorScalarFieldEnum
    having?: AuthorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthorCountAggregateInputType | true
    _min?: AuthorMinAggregateInputType
    _max?: AuthorMaxAggregateInputType
  }

  export type AuthorGroupByOutputType = {
    id: string
    firstname: string
    lastname: string | null
    artsId: string[]
    _count: AuthorCountAggregateOutputType | null
    _min: AuthorMinAggregateOutputType | null
    _max: AuthorMaxAggregateOutputType | null
  }

  type GetAuthorGroupByPayload<T extends AuthorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthorGroupByOutputType[P]>
            : GetScalarType<T[P], AuthorGroupByOutputType[P]>
        }
      >
    >


  export type AuthorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    artsId?: boolean
    arts?: boolean | Author$artsArgs<ExtArgs>
    _count?: boolean | AuthorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["author"]>



  export type AuthorSelectScalar = {
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    artsId?: boolean
  }

  export type AuthorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstname" | "lastname" | "artsId", ExtArgs["result"]["author"]>
  export type AuthorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arts?: boolean | Author$artsArgs<ExtArgs>
    _count?: boolean | AuthorCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AuthorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Author"
    objects: {
      arts: Prisma.$ArtsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstname: string
      lastname: string | null
      artsId: string[]
    }, ExtArgs["result"]["author"]>
    composites: {}
  }

  type AuthorGetPayload<S extends boolean | null | undefined | AuthorDefaultArgs> = $Result.GetResult<Prisma.$AuthorPayload, S>

  type AuthorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuthorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuthorCountAggregateInputType | true
    }

  export interface AuthorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Author'], meta: { name: 'Author' } }
    /**
     * Find zero or one Author that matches the filter.
     * @param {AuthorFindUniqueArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuthorFindUniqueArgs>(args: SelectSubset<T, AuthorFindUniqueArgs<ExtArgs>>): Prisma__AuthorClient<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Author that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuthorFindUniqueOrThrowArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuthorFindUniqueOrThrowArgs>(args: SelectSubset<T, AuthorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuthorClient<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Author that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorFindFirstArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuthorFindFirstArgs>(args?: SelectSubset<T, AuthorFindFirstArgs<ExtArgs>>): Prisma__AuthorClient<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Author that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorFindFirstOrThrowArgs} args - Arguments to find a Author
     * @example
     * // Get one Author
     * const author = await prisma.author.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuthorFindFirstOrThrowArgs>(args?: SelectSubset<T, AuthorFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuthorClient<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Authors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Authors
     * const authors = await prisma.author.findMany()
     * 
     * // Get first 10 Authors
     * const authors = await prisma.author.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authorWithIdOnly = await prisma.author.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuthorFindManyArgs>(args?: SelectSubset<T, AuthorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Author.
     * @param {AuthorCreateArgs} args - Arguments to create a Author.
     * @example
     * // Create one Author
     * const Author = await prisma.author.create({
     *   data: {
     *     // ... data to create a Author
     *   }
     * })
     * 
     */
    create<T extends AuthorCreateArgs>(args: SelectSubset<T, AuthorCreateArgs<ExtArgs>>): Prisma__AuthorClient<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Authors.
     * @param {AuthorCreateManyArgs} args - Arguments to create many Authors.
     * @example
     * // Create many Authors
     * const author = await prisma.author.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuthorCreateManyArgs>(args?: SelectSubset<T, AuthorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Author.
     * @param {AuthorDeleteArgs} args - Arguments to delete one Author.
     * @example
     * // Delete one Author
     * const Author = await prisma.author.delete({
     *   where: {
     *     // ... filter to delete one Author
     *   }
     * })
     * 
     */
    delete<T extends AuthorDeleteArgs>(args: SelectSubset<T, AuthorDeleteArgs<ExtArgs>>): Prisma__AuthorClient<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Author.
     * @param {AuthorUpdateArgs} args - Arguments to update one Author.
     * @example
     * // Update one Author
     * const author = await prisma.author.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuthorUpdateArgs>(args: SelectSubset<T, AuthorUpdateArgs<ExtArgs>>): Prisma__AuthorClient<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Authors.
     * @param {AuthorDeleteManyArgs} args - Arguments to filter Authors to delete.
     * @example
     * // Delete a few Authors
     * const { count } = await prisma.author.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuthorDeleteManyArgs>(args?: SelectSubset<T, AuthorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Authors
     * const author = await prisma.author.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuthorUpdateManyArgs>(args: SelectSubset<T, AuthorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Author.
     * @param {AuthorUpsertArgs} args - Arguments to update or create a Author.
     * @example
     * // Update or create a Author
     * const author = await prisma.author.upsert({
     *   create: {
     *     // ... data to create a Author
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Author we want to update
     *   }
     * })
     */
    upsert<T extends AuthorUpsertArgs>(args: SelectSubset<T, AuthorUpsertArgs<ExtArgs>>): Prisma__AuthorClient<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Authors that matches the filter.
     * @param {AuthorFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const author = await prisma.author.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: AuthorFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Author.
     * @param {AuthorAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const author = await prisma.author.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: AuthorAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorCountArgs} args - Arguments to filter Authors to count.
     * @example
     * // Count the number of Authors
     * const count = await prisma.author.count({
     *   where: {
     *     // ... the filter for the Authors we want to count
     *   }
     * })
    **/
    count<T extends AuthorCountArgs>(
      args?: Subset<T, AuthorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Author.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthorAggregateArgs>(args: Subset<T, AuthorAggregateArgs>): Prisma.PrismaPromise<GetAuthorAggregateType<T>>

    /**
     * Group by Author.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthorGroupByArgs['orderBy'] }
        : { orderBy?: AuthorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Author model
   */
  readonly fields: AuthorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Author.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    arts<T extends Author$artsArgs<ExtArgs> = {}>(args?: Subset<T, Author$artsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Author model
   */
  interface AuthorFieldRefs {
    readonly id: FieldRef<"Author", 'String'>
    readonly firstname: FieldRef<"Author", 'String'>
    readonly lastname: FieldRef<"Author", 'String'>
    readonly artsId: FieldRef<"Author", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * Author findUnique
   */
  export type AuthorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Author
     */
    omit?: AuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * Filter, which Author to fetch.
     */
    where: AuthorWhereUniqueInput
  }

  /**
   * Author findUniqueOrThrow
   */
  export type AuthorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Author
     */
    omit?: AuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * Filter, which Author to fetch.
     */
    where: AuthorWhereUniqueInput
  }

  /**
   * Author findFirst
   */
  export type AuthorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Author
     */
    omit?: AuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * Filter, which Author to fetch.
     */
    where?: AuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authors to fetch.
     */
    orderBy?: AuthorOrderByWithRelationInput | AuthorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Authors.
     */
    cursor?: AuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Authors.
     */
    distinct?: AuthorScalarFieldEnum | AuthorScalarFieldEnum[]
  }

  /**
   * Author findFirstOrThrow
   */
  export type AuthorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Author
     */
    omit?: AuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * Filter, which Author to fetch.
     */
    where?: AuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authors to fetch.
     */
    orderBy?: AuthorOrderByWithRelationInput | AuthorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Authors.
     */
    cursor?: AuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Authors.
     */
    distinct?: AuthorScalarFieldEnum | AuthorScalarFieldEnum[]
  }

  /**
   * Author findMany
   */
  export type AuthorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Author
     */
    omit?: AuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * Filter, which Authors to fetch.
     */
    where?: AuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authors to fetch.
     */
    orderBy?: AuthorOrderByWithRelationInput | AuthorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Authors.
     */
    cursor?: AuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authors.
     */
    skip?: number
    distinct?: AuthorScalarFieldEnum | AuthorScalarFieldEnum[]
  }

  /**
   * Author create
   */
  export type AuthorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Author
     */
    omit?: AuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * The data needed to create a Author.
     */
    data: XOR<AuthorCreateInput, AuthorUncheckedCreateInput>
  }

  /**
   * Author createMany
   */
  export type AuthorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Authors.
     */
    data: AuthorCreateManyInput | AuthorCreateManyInput[]
  }

  /**
   * Author update
   */
  export type AuthorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Author
     */
    omit?: AuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * The data needed to update a Author.
     */
    data: XOR<AuthorUpdateInput, AuthorUncheckedUpdateInput>
    /**
     * Choose, which Author to update.
     */
    where: AuthorWhereUniqueInput
  }

  /**
   * Author updateMany
   */
  export type AuthorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Authors.
     */
    data: XOR<AuthorUpdateManyMutationInput, AuthorUncheckedUpdateManyInput>
    /**
     * Filter which Authors to update
     */
    where?: AuthorWhereInput
    /**
     * Limit how many Authors to update.
     */
    limit?: number
  }

  /**
   * Author upsert
   */
  export type AuthorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Author
     */
    omit?: AuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * The filter to search for the Author to update in case it exists.
     */
    where: AuthorWhereUniqueInput
    /**
     * In case the Author found by the `where` argument doesn't exist, create a new Author with this data.
     */
    create: XOR<AuthorCreateInput, AuthorUncheckedCreateInput>
    /**
     * In case the Author was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthorUpdateInput, AuthorUncheckedUpdateInput>
  }

  /**
   * Author delete
   */
  export type AuthorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Author
     */
    omit?: AuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorInclude<ExtArgs> | null
    /**
     * Filter which Author to delete.
     */
    where: AuthorWhereUniqueInput
  }

  /**
   * Author deleteMany
   */
  export type AuthorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Authors to delete
     */
    where?: AuthorWhereInput
    /**
     * Limit how many Authors to delete.
     */
    limit?: number
  }

  /**
   * Author findRaw
   */
  export type AuthorFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Author aggregateRaw
   */
  export type AuthorAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Author.arts
   */
  export type Author$artsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arts
     */
    select?: ArtsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arts
     */
    omit?: ArtsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsInclude<ExtArgs> | null
    where?: ArtsWhereInput
    orderBy?: ArtsOrderByWithRelationInput | ArtsOrderByWithRelationInput[]
    cursor?: ArtsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtsScalarFieldEnum | ArtsScalarFieldEnum[]
  }

  /**
   * Author without action
   */
  export type AuthorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Author
     */
    omit?: AuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorInclude<ExtArgs> | null
  }


  /**
   * Model Arts
   */

  export type AggregateArts = {
    _count: ArtsCountAggregateOutputType | null
    _min: ArtsMinAggregateOutputType | null
    _max: ArtsMaxAggregateOutputType | null
  }

  export type ArtsMinAggregateOutputType = {
    id: string | null
    title: string | null
    date: Date | null
    annotation: string | null
    userId: string | null
    imageId: string | null
  }

  export type ArtsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    date: Date | null
    annotation: string | null
    userId: string | null
    imageId: string | null
  }

  export type ArtsCountAggregateOutputType = {
    id: number
    title: number
    authorId: number
    date: number
    annotation: number
    userId: number
    imageId: number
    artsCollectionsId: number
    _all: number
  }


  export type ArtsMinAggregateInputType = {
    id?: true
    title?: true
    date?: true
    annotation?: true
    userId?: true
    imageId?: true
  }

  export type ArtsMaxAggregateInputType = {
    id?: true
    title?: true
    date?: true
    annotation?: true
    userId?: true
    imageId?: true
  }

  export type ArtsCountAggregateInputType = {
    id?: true
    title?: true
    authorId?: true
    date?: true
    annotation?: true
    userId?: true
    imageId?: true
    artsCollectionsId?: true
    _all?: true
  }

  export type ArtsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Arts to aggregate.
     */
    where?: ArtsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arts to fetch.
     */
    orderBy?: ArtsOrderByWithRelationInput | ArtsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArtsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Arts
    **/
    _count?: true | ArtsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtsMaxAggregateInputType
  }

  export type GetArtsAggregateType<T extends ArtsAggregateArgs> = {
        [P in keyof T & keyof AggregateArts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArts[P]>
      : GetScalarType<T[P], AggregateArts[P]>
  }




  export type ArtsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtsWhereInput
    orderBy?: ArtsOrderByWithAggregationInput | ArtsOrderByWithAggregationInput[]
    by: ArtsScalarFieldEnum[] | ArtsScalarFieldEnum
    having?: ArtsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtsCountAggregateInputType | true
    _min?: ArtsMinAggregateInputType
    _max?: ArtsMaxAggregateInputType
  }

  export type ArtsGroupByOutputType = {
    id: string
    title: string | null
    authorId: string[]
    date: Date
    annotation: string | null
    userId: string | null
    imageId: string
    artsCollectionsId: string[]
    _count: ArtsCountAggregateOutputType | null
    _min: ArtsMinAggregateOutputType | null
    _max: ArtsMaxAggregateOutputType | null
  }

  type GetArtsGroupByPayload<T extends ArtsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArtsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtsGroupByOutputType[P]>
            : GetScalarType<T[P], ArtsGroupByOutputType[P]>
        }
      >
    >


  export type ArtsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    authorId?: boolean
    date?: boolean
    annotation?: boolean
    userId?: boolean
    imageId?: boolean
    artsCollectionsId?: boolean
    img?: boolean | ImageDefaultArgs<ExtArgs>
    author?: boolean | Arts$authorArgs<ExtArgs>
    User?: boolean | Arts$UserArgs<ExtArgs>
    ArtsCollections?: boolean | ArtsCollectionsDefaultArgs<ExtArgs>
    _count?: boolean | ArtsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["arts"]>



  export type ArtsSelectScalar = {
    id?: boolean
    title?: boolean
    authorId?: boolean
    date?: boolean
    annotation?: boolean
    userId?: boolean
    imageId?: boolean
    artsCollectionsId?: boolean
  }

  export type ArtsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "authorId" | "date" | "annotation" | "userId" | "imageId" | "artsCollectionsId", ExtArgs["result"]["arts"]>
  export type ArtsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    img?: boolean | ImageDefaultArgs<ExtArgs>
    author?: boolean | Arts$authorArgs<ExtArgs>
    User?: boolean | Arts$UserArgs<ExtArgs>
    ArtsCollections?: boolean | ArtsCollectionsDefaultArgs<ExtArgs>
    _count?: boolean | ArtsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ArtsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Arts"
    objects: {
      img: Prisma.$ImagePayload<ExtArgs>
      author: Prisma.$AuthorPayload<ExtArgs>[]
      User: Prisma.$UserPayload<ExtArgs> | null
      ArtsCollections: Prisma.$ArtsCollectionsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string | null
      authorId: string[]
      date: Date
      annotation: string | null
      userId: string | null
      imageId: string
      artsCollectionsId: string[]
    }, ExtArgs["result"]["arts"]>
    composites: {}
  }

  type ArtsGetPayload<S extends boolean | null | undefined | ArtsDefaultArgs> = $Result.GetResult<Prisma.$ArtsPayload, S>

  type ArtsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ArtsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArtsCountAggregateInputType | true
    }

  export interface ArtsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Arts'], meta: { name: 'Arts' } }
    /**
     * Find zero or one Arts that matches the filter.
     * @param {ArtsFindUniqueArgs} args - Arguments to find a Arts
     * @example
     * // Get one Arts
     * const arts = await prisma.arts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArtsFindUniqueArgs>(args: SelectSubset<T, ArtsFindUniqueArgs<ExtArgs>>): Prisma__ArtsClient<$Result.GetResult<Prisma.$ArtsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Arts that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ArtsFindUniqueOrThrowArgs} args - Arguments to find a Arts
     * @example
     * // Get one Arts
     * const arts = await prisma.arts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArtsFindUniqueOrThrowArgs>(args: SelectSubset<T, ArtsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArtsClient<$Result.GetResult<Prisma.$ArtsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Arts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtsFindFirstArgs} args - Arguments to find a Arts
     * @example
     * // Get one Arts
     * const arts = await prisma.arts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArtsFindFirstArgs>(args?: SelectSubset<T, ArtsFindFirstArgs<ExtArgs>>): Prisma__ArtsClient<$Result.GetResult<Prisma.$ArtsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Arts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtsFindFirstOrThrowArgs} args - Arguments to find a Arts
     * @example
     * // Get one Arts
     * const arts = await prisma.arts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArtsFindFirstOrThrowArgs>(args?: SelectSubset<T, ArtsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArtsClient<$Result.GetResult<Prisma.$ArtsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Arts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Arts
     * const arts = await prisma.arts.findMany()
     * 
     * // Get first 10 Arts
     * const arts = await prisma.arts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artsWithIdOnly = await prisma.arts.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArtsFindManyArgs>(args?: SelectSubset<T, ArtsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Arts.
     * @param {ArtsCreateArgs} args - Arguments to create a Arts.
     * @example
     * // Create one Arts
     * const Arts = await prisma.arts.create({
     *   data: {
     *     // ... data to create a Arts
     *   }
     * })
     * 
     */
    create<T extends ArtsCreateArgs>(args: SelectSubset<T, ArtsCreateArgs<ExtArgs>>): Prisma__ArtsClient<$Result.GetResult<Prisma.$ArtsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Arts.
     * @param {ArtsCreateManyArgs} args - Arguments to create many Arts.
     * @example
     * // Create many Arts
     * const arts = await prisma.arts.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArtsCreateManyArgs>(args?: SelectSubset<T, ArtsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Arts.
     * @param {ArtsDeleteArgs} args - Arguments to delete one Arts.
     * @example
     * // Delete one Arts
     * const Arts = await prisma.arts.delete({
     *   where: {
     *     // ... filter to delete one Arts
     *   }
     * })
     * 
     */
    delete<T extends ArtsDeleteArgs>(args: SelectSubset<T, ArtsDeleteArgs<ExtArgs>>): Prisma__ArtsClient<$Result.GetResult<Prisma.$ArtsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Arts.
     * @param {ArtsUpdateArgs} args - Arguments to update one Arts.
     * @example
     * // Update one Arts
     * const arts = await prisma.arts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArtsUpdateArgs>(args: SelectSubset<T, ArtsUpdateArgs<ExtArgs>>): Prisma__ArtsClient<$Result.GetResult<Prisma.$ArtsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Arts.
     * @param {ArtsDeleteManyArgs} args - Arguments to filter Arts to delete.
     * @example
     * // Delete a few Arts
     * const { count } = await prisma.arts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArtsDeleteManyArgs>(args?: SelectSubset<T, ArtsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Arts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Arts
     * const arts = await prisma.arts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArtsUpdateManyArgs>(args: SelectSubset<T, ArtsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Arts.
     * @param {ArtsUpsertArgs} args - Arguments to update or create a Arts.
     * @example
     * // Update or create a Arts
     * const arts = await prisma.arts.upsert({
     *   create: {
     *     // ... data to create a Arts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Arts we want to update
     *   }
     * })
     */
    upsert<T extends ArtsUpsertArgs>(args: SelectSubset<T, ArtsUpsertArgs<ExtArgs>>): Prisma__ArtsClient<$Result.GetResult<Prisma.$ArtsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Arts that matches the filter.
     * @param {ArtsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const arts = await prisma.arts.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ArtsFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Arts.
     * @param {ArtsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const arts = await prisma.arts.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ArtsAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Arts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtsCountArgs} args - Arguments to filter Arts to count.
     * @example
     * // Count the number of Arts
     * const count = await prisma.arts.count({
     *   where: {
     *     // ... the filter for the Arts we want to count
     *   }
     * })
    **/
    count<T extends ArtsCountArgs>(
      args?: Subset<T, ArtsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Arts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtsAggregateArgs>(args: Subset<T, ArtsAggregateArgs>): Prisma.PrismaPromise<GetArtsAggregateType<T>>

    /**
     * Group by Arts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtsGroupByArgs['orderBy'] }
        : { orderBy?: ArtsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Arts model
   */
  readonly fields: ArtsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Arts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArtsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    img<T extends ImageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ImageDefaultArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    author<T extends Arts$authorArgs<ExtArgs> = {}>(args?: Subset<T, Arts$authorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    User<T extends Arts$UserArgs<ExtArgs> = {}>(args?: Subset<T, Arts$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    ArtsCollections<T extends ArtsCollectionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ArtsCollectionsDefaultArgs<ExtArgs>>): Prisma__ArtsCollectionsClient<$Result.GetResult<Prisma.$ArtsCollectionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Arts model
   */
  interface ArtsFieldRefs {
    readonly id: FieldRef<"Arts", 'String'>
    readonly title: FieldRef<"Arts", 'String'>
    readonly authorId: FieldRef<"Arts", 'String[]'>
    readonly date: FieldRef<"Arts", 'DateTime'>
    readonly annotation: FieldRef<"Arts", 'String'>
    readonly userId: FieldRef<"Arts", 'String'>
    readonly imageId: FieldRef<"Arts", 'String'>
    readonly artsCollectionsId: FieldRef<"Arts", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * Arts findUnique
   */
  export type ArtsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arts
     */
    select?: ArtsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arts
     */
    omit?: ArtsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsInclude<ExtArgs> | null
    /**
     * Filter, which Arts to fetch.
     */
    where: ArtsWhereUniqueInput
  }

  /**
   * Arts findUniqueOrThrow
   */
  export type ArtsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arts
     */
    select?: ArtsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arts
     */
    omit?: ArtsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsInclude<ExtArgs> | null
    /**
     * Filter, which Arts to fetch.
     */
    where: ArtsWhereUniqueInput
  }

  /**
   * Arts findFirst
   */
  export type ArtsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arts
     */
    select?: ArtsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arts
     */
    omit?: ArtsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsInclude<ExtArgs> | null
    /**
     * Filter, which Arts to fetch.
     */
    where?: ArtsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arts to fetch.
     */
    orderBy?: ArtsOrderByWithRelationInput | ArtsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Arts.
     */
    cursor?: ArtsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Arts.
     */
    distinct?: ArtsScalarFieldEnum | ArtsScalarFieldEnum[]
  }

  /**
   * Arts findFirstOrThrow
   */
  export type ArtsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arts
     */
    select?: ArtsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arts
     */
    omit?: ArtsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsInclude<ExtArgs> | null
    /**
     * Filter, which Arts to fetch.
     */
    where?: ArtsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arts to fetch.
     */
    orderBy?: ArtsOrderByWithRelationInput | ArtsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Arts.
     */
    cursor?: ArtsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Arts.
     */
    distinct?: ArtsScalarFieldEnum | ArtsScalarFieldEnum[]
  }

  /**
   * Arts findMany
   */
  export type ArtsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arts
     */
    select?: ArtsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arts
     */
    omit?: ArtsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsInclude<ExtArgs> | null
    /**
     * Filter, which Arts to fetch.
     */
    where?: ArtsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arts to fetch.
     */
    orderBy?: ArtsOrderByWithRelationInput | ArtsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Arts.
     */
    cursor?: ArtsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arts.
     */
    skip?: number
    distinct?: ArtsScalarFieldEnum | ArtsScalarFieldEnum[]
  }

  /**
   * Arts create
   */
  export type ArtsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arts
     */
    select?: ArtsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arts
     */
    omit?: ArtsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsInclude<ExtArgs> | null
    /**
     * The data needed to create a Arts.
     */
    data: XOR<ArtsCreateInput, ArtsUncheckedCreateInput>
  }

  /**
   * Arts createMany
   */
  export type ArtsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Arts.
     */
    data: ArtsCreateManyInput | ArtsCreateManyInput[]
  }

  /**
   * Arts update
   */
  export type ArtsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arts
     */
    select?: ArtsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arts
     */
    omit?: ArtsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsInclude<ExtArgs> | null
    /**
     * The data needed to update a Arts.
     */
    data: XOR<ArtsUpdateInput, ArtsUncheckedUpdateInput>
    /**
     * Choose, which Arts to update.
     */
    where: ArtsWhereUniqueInput
  }

  /**
   * Arts updateMany
   */
  export type ArtsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Arts.
     */
    data: XOR<ArtsUpdateManyMutationInput, ArtsUncheckedUpdateManyInput>
    /**
     * Filter which Arts to update
     */
    where?: ArtsWhereInput
    /**
     * Limit how many Arts to update.
     */
    limit?: number
  }

  /**
   * Arts upsert
   */
  export type ArtsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arts
     */
    select?: ArtsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arts
     */
    omit?: ArtsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsInclude<ExtArgs> | null
    /**
     * The filter to search for the Arts to update in case it exists.
     */
    where: ArtsWhereUniqueInput
    /**
     * In case the Arts found by the `where` argument doesn't exist, create a new Arts with this data.
     */
    create: XOR<ArtsCreateInput, ArtsUncheckedCreateInput>
    /**
     * In case the Arts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArtsUpdateInput, ArtsUncheckedUpdateInput>
  }

  /**
   * Arts delete
   */
  export type ArtsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arts
     */
    select?: ArtsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arts
     */
    omit?: ArtsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsInclude<ExtArgs> | null
    /**
     * Filter which Arts to delete.
     */
    where: ArtsWhereUniqueInput
  }

  /**
   * Arts deleteMany
   */
  export type ArtsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Arts to delete
     */
    where?: ArtsWhereInput
    /**
     * Limit how many Arts to delete.
     */
    limit?: number
  }

  /**
   * Arts findRaw
   */
  export type ArtsFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Arts aggregateRaw
   */
  export type ArtsAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Arts.author
   */
  export type Arts$authorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Author
     */
    select?: AuthorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Author
     */
    omit?: AuthorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthorInclude<ExtArgs> | null
    where?: AuthorWhereInput
    orderBy?: AuthorOrderByWithRelationInput | AuthorOrderByWithRelationInput[]
    cursor?: AuthorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuthorScalarFieldEnum | AuthorScalarFieldEnum[]
  }

  /**
   * Arts.User
   */
  export type Arts$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Arts without action
   */
  export type ArtsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arts
     */
    select?: ArtsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arts
     */
    omit?: ArtsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsInclude<ExtArgs> | null
  }


  /**
   * Model ArtsCollections
   */

  export type AggregateArtsCollections = {
    _count: ArtsCollectionsCountAggregateOutputType | null
    _min: ArtsCollectionsMinAggregateOutputType | null
    _max: ArtsCollectionsMaxAggregateOutputType | null
  }

  export type ArtsCollectionsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    artsId: string | null
  }

  export type ArtsCollectionsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    artsId: string | null
  }

  export type ArtsCollectionsCountAggregateOutputType = {
    id: number
    userId: number
    artsId: number
    _all: number
  }


  export type ArtsCollectionsMinAggregateInputType = {
    id?: true
    userId?: true
    artsId?: true
  }

  export type ArtsCollectionsMaxAggregateInputType = {
    id?: true
    userId?: true
    artsId?: true
  }

  export type ArtsCollectionsCountAggregateInputType = {
    id?: true
    userId?: true
    artsId?: true
    _all?: true
  }

  export type ArtsCollectionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArtsCollections to aggregate.
     */
    where?: ArtsCollectionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtsCollections to fetch.
     */
    orderBy?: ArtsCollectionsOrderByWithRelationInput | ArtsCollectionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArtsCollectionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtsCollections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtsCollections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ArtsCollections
    **/
    _count?: true | ArtsCollectionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtsCollectionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtsCollectionsMaxAggregateInputType
  }

  export type GetArtsCollectionsAggregateType<T extends ArtsCollectionsAggregateArgs> = {
        [P in keyof T & keyof AggregateArtsCollections]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtsCollections[P]>
      : GetScalarType<T[P], AggregateArtsCollections[P]>
  }




  export type ArtsCollectionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtsCollectionsWhereInput
    orderBy?: ArtsCollectionsOrderByWithAggregationInput | ArtsCollectionsOrderByWithAggregationInput[]
    by: ArtsCollectionsScalarFieldEnum[] | ArtsCollectionsScalarFieldEnum
    having?: ArtsCollectionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtsCollectionsCountAggregateInputType | true
    _min?: ArtsCollectionsMinAggregateInputType
    _max?: ArtsCollectionsMaxAggregateInputType
  }

  export type ArtsCollectionsGroupByOutputType = {
    id: string
    userId: string
    artsId: string
    _count: ArtsCollectionsCountAggregateOutputType | null
    _min: ArtsCollectionsMinAggregateOutputType | null
    _max: ArtsCollectionsMaxAggregateOutputType | null
  }

  type GetArtsCollectionsGroupByPayload<T extends ArtsCollectionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArtsCollectionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtsCollectionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtsCollectionsGroupByOutputType[P]>
            : GetScalarType<T[P], ArtsCollectionsGroupByOutputType[P]>
        }
      >
    >


  export type ArtsCollectionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    artsId?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    arts?: boolean | ArtsCollections$artsArgs<ExtArgs>
    _count?: boolean | ArtsCollectionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artsCollections"]>



  export type ArtsCollectionsSelectScalar = {
    id?: boolean
    userId?: boolean
    artsId?: boolean
  }

  export type ArtsCollectionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "artsId", ExtArgs["result"]["artsCollections"]>
  export type ArtsCollectionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    arts?: boolean | ArtsCollections$artsArgs<ExtArgs>
    _count?: boolean | ArtsCollectionsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ArtsCollectionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ArtsCollections"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      arts: Prisma.$ArtsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      artsId: string
    }, ExtArgs["result"]["artsCollections"]>
    composites: {}
  }

  type ArtsCollectionsGetPayload<S extends boolean | null | undefined | ArtsCollectionsDefaultArgs> = $Result.GetResult<Prisma.$ArtsCollectionsPayload, S>

  type ArtsCollectionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ArtsCollectionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArtsCollectionsCountAggregateInputType | true
    }

  export interface ArtsCollectionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArtsCollections'], meta: { name: 'ArtsCollections' } }
    /**
     * Find zero or one ArtsCollections that matches the filter.
     * @param {ArtsCollectionsFindUniqueArgs} args - Arguments to find a ArtsCollections
     * @example
     * // Get one ArtsCollections
     * const artsCollections = await prisma.artsCollections.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArtsCollectionsFindUniqueArgs>(args: SelectSubset<T, ArtsCollectionsFindUniqueArgs<ExtArgs>>): Prisma__ArtsCollectionsClient<$Result.GetResult<Prisma.$ArtsCollectionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ArtsCollections that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ArtsCollectionsFindUniqueOrThrowArgs} args - Arguments to find a ArtsCollections
     * @example
     * // Get one ArtsCollections
     * const artsCollections = await prisma.artsCollections.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArtsCollectionsFindUniqueOrThrowArgs>(args: SelectSubset<T, ArtsCollectionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArtsCollectionsClient<$Result.GetResult<Prisma.$ArtsCollectionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ArtsCollections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtsCollectionsFindFirstArgs} args - Arguments to find a ArtsCollections
     * @example
     * // Get one ArtsCollections
     * const artsCollections = await prisma.artsCollections.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArtsCollectionsFindFirstArgs>(args?: SelectSubset<T, ArtsCollectionsFindFirstArgs<ExtArgs>>): Prisma__ArtsCollectionsClient<$Result.GetResult<Prisma.$ArtsCollectionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ArtsCollections that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtsCollectionsFindFirstOrThrowArgs} args - Arguments to find a ArtsCollections
     * @example
     * // Get one ArtsCollections
     * const artsCollections = await prisma.artsCollections.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArtsCollectionsFindFirstOrThrowArgs>(args?: SelectSubset<T, ArtsCollectionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArtsCollectionsClient<$Result.GetResult<Prisma.$ArtsCollectionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ArtsCollections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtsCollectionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArtsCollections
     * const artsCollections = await prisma.artsCollections.findMany()
     * 
     * // Get first 10 ArtsCollections
     * const artsCollections = await prisma.artsCollections.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artsCollectionsWithIdOnly = await prisma.artsCollections.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArtsCollectionsFindManyArgs>(args?: SelectSubset<T, ArtsCollectionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtsCollectionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ArtsCollections.
     * @param {ArtsCollectionsCreateArgs} args - Arguments to create a ArtsCollections.
     * @example
     * // Create one ArtsCollections
     * const ArtsCollections = await prisma.artsCollections.create({
     *   data: {
     *     // ... data to create a ArtsCollections
     *   }
     * })
     * 
     */
    create<T extends ArtsCollectionsCreateArgs>(args: SelectSubset<T, ArtsCollectionsCreateArgs<ExtArgs>>): Prisma__ArtsCollectionsClient<$Result.GetResult<Prisma.$ArtsCollectionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ArtsCollections.
     * @param {ArtsCollectionsCreateManyArgs} args - Arguments to create many ArtsCollections.
     * @example
     * // Create many ArtsCollections
     * const artsCollections = await prisma.artsCollections.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArtsCollectionsCreateManyArgs>(args?: SelectSubset<T, ArtsCollectionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ArtsCollections.
     * @param {ArtsCollectionsDeleteArgs} args - Arguments to delete one ArtsCollections.
     * @example
     * // Delete one ArtsCollections
     * const ArtsCollections = await prisma.artsCollections.delete({
     *   where: {
     *     // ... filter to delete one ArtsCollections
     *   }
     * })
     * 
     */
    delete<T extends ArtsCollectionsDeleteArgs>(args: SelectSubset<T, ArtsCollectionsDeleteArgs<ExtArgs>>): Prisma__ArtsCollectionsClient<$Result.GetResult<Prisma.$ArtsCollectionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ArtsCollections.
     * @param {ArtsCollectionsUpdateArgs} args - Arguments to update one ArtsCollections.
     * @example
     * // Update one ArtsCollections
     * const artsCollections = await prisma.artsCollections.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArtsCollectionsUpdateArgs>(args: SelectSubset<T, ArtsCollectionsUpdateArgs<ExtArgs>>): Prisma__ArtsCollectionsClient<$Result.GetResult<Prisma.$ArtsCollectionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ArtsCollections.
     * @param {ArtsCollectionsDeleteManyArgs} args - Arguments to filter ArtsCollections to delete.
     * @example
     * // Delete a few ArtsCollections
     * const { count } = await prisma.artsCollections.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArtsCollectionsDeleteManyArgs>(args?: SelectSubset<T, ArtsCollectionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArtsCollections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtsCollectionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArtsCollections
     * const artsCollections = await prisma.artsCollections.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArtsCollectionsUpdateManyArgs>(args: SelectSubset<T, ArtsCollectionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ArtsCollections.
     * @param {ArtsCollectionsUpsertArgs} args - Arguments to update or create a ArtsCollections.
     * @example
     * // Update or create a ArtsCollections
     * const artsCollections = await prisma.artsCollections.upsert({
     *   create: {
     *     // ... data to create a ArtsCollections
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArtsCollections we want to update
     *   }
     * })
     */
    upsert<T extends ArtsCollectionsUpsertArgs>(args: SelectSubset<T, ArtsCollectionsUpsertArgs<ExtArgs>>): Prisma__ArtsCollectionsClient<$Result.GetResult<Prisma.$ArtsCollectionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ArtsCollections that matches the filter.
     * @param {ArtsCollectionsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const artsCollections = await prisma.artsCollections.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ArtsCollectionsFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ArtsCollections.
     * @param {ArtsCollectionsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const artsCollections = await prisma.artsCollections.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ArtsCollectionsAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ArtsCollections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtsCollectionsCountArgs} args - Arguments to filter ArtsCollections to count.
     * @example
     * // Count the number of ArtsCollections
     * const count = await prisma.artsCollections.count({
     *   where: {
     *     // ... the filter for the ArtsCollections we want to count
     *   }
     * })
    **/
    count<T extends ArtsCollectionsCountArgs>(
      args?: Subset<T, ArtsCollectionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtsCollectionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArtsCollections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtsCollectionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtsCollectionsAggregateArgs>(args: Subset<T, ArtsCollectionsAggregateArgs>): Prisma.PrismaPromise<GetArtsCollectionsAggregateType<T>>

    /**
     * Group by ArtsCollections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtsCollectionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtsCollectionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtsCollectionsGroupByArgs['orderBy'] }
        : { orderBy?: ArtsCollectionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtsCollectionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtsCollectionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ArtsCollections model
   */
  readonly fields: ArtsCollectionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ArtsCollections.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArtsCollectionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    arts<T extends ArtsCollections$artsArgs<ExtArgs> = {}>(args?: Subset<T, ArtsCollections$artsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ArtsCollections model
   */
  interface ArtsCollectionsFieldRefs {
    readonly id: FieldRef<"ArtsCollections", 'String'>
    readonly userId: FieldRef<"ArtsCollections", 'String'>
    readonly artsId: FieldRef<"ArtsCollections", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ArtsCollections findUnique
   */
  export type ArtsCollectionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtsCollections
     */
    select?: ArtsCollectionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArtsCollections
     */
    omit?: ArtsCollectionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsCollectionsInclude<ExtArgs> | null
    /**
     * Filter, which ArtsCollections to fetch.
     */
    where: ArtsCollectionsWhereUniqueInput
  }

  /**
   * ArtsCollections findUniqueOrThrow
   */
  export type ArtsCollectionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtsCollections
     */
    select?: ArtsCollectionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArtsCollections
     */
    omit?: ArtsCollectionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsCollectionsInclude<ExtArgs> | null
    /**
     * Filter, which ArtsCollections to fetch.
     */
    where: ArtsCollectionsWhereUniqueInput
  }

  /**
   * ArtsCollections findFirst
   */
  export type ArtsCollectionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtsCollections
     */
    select?: ArtsCollectionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArtsCollections
     */
    omit?: ArtsCollectionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsCollectionsInclude<ExtArgs> | null
    /**
     * Filter, which ArtsCollections to fetch.
     */
    where?: ArtsCollectionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtsCollections to fetch.
     */
    orderBy?: ArtsCollectionsOrderByWithRelationInput | ArtsCollectionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArtsCollections.
     */
    cursor?: ArtsCollectionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtsCollections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtsCollections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArtsCollections.
     */
    distinct?: ArtsCollectionsScalarFieldEnum | ArtsCollectionsScalarFieldEnum[]
  }

  /**
   * ArtsCollections findFirstOrThrow
   */
  export type ArtsCollectionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtsCollections
     */
    select?: ArtsCollectionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArtsCollections
     */
    omit?: ArtsCollectionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsCollectionsInclude<ExtArgs> | null
    /**
     * Filter, which ArtsCollections to fetch.
     */
    where?: ArtsCollectionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtsCollections to fetch.
     */
    orderBy?: ArtsCollectionsOrderByWithRelationInput | ArtsCollectionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArtsCollections.
     */
    cursor?: ArtsCollectionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtsCollections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtsCollections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArtsCollections.
     */
    distinct?: ArtsCollectionsScalarFieldEnum | ArtsCollectionsScalarFieldEnum[]
  }

  /**
   * ArtsCollections findMany
   */
  export type ArtsCollectionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtsCollections
     */
    select?: ArtsCollectionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArtsCollections
     */
    omit?: ArtsCollectionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsCollectionsInclude<ExtArgs> | null
    /**
     * Filter, which ArtsCollections to fetch.
     */
    where?: ArtsCollectionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtsCollections to fetch.
     */
    orderBy?: ArtsCollectionsOrderByWithRelationInput | ArtsCollectionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ArtsCollections.
     */
    cursor?: ArtsCollectionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtsCollections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtsCollections.
     */
    skip?: number
    distinct?: ArtsCollectionsScalarFieldEnum | ArtsCollectionsScalarFieldEnum[]
  }

  /**
   * ArtsCollections create
   */
  export type ArtsCollectionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtsCollections
     */
    select?: ArtsCollectionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArtsCollections
     */
    omit?: ArtsCollectionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsCollectionsInclude<ExtArgs> | null
    /**
     * The data needed to create a ArtsCollections.
     */
    data: XOR<ArtsCollectionsCreateInput, ArtsCollectionsUncheckedCreateInput>
  }

  /**
   * ArtsCollections createMany
   */
  export type ArtsCollectionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ArtsCollections.
     */
    data: ArtsCollectionsCreateManyInput | ArtsCollectionsCreateManyInput[]
  }

  /**
   * ArtsCollections update
   */
  export type ArtsCollectionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtsCollections
     */
    select?: ArtsCollectionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArtsCollections
     */
    omit?: ArtsCollectionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsCollectionsInclude<ExtArgs> | null
    /**
     * The data needed to update a ArtsCollections.
     */
    data: XOR<ArtsCollectionsUpdateInput, ArtsCollectionsUncheckedUpdateInput>
    /**
     * Choose, which ArtsCollections to update.
     */
    where: ArtsCollectionsWhereUniqueInput
  }

  /**
   * ArtsCollections updateMany
   */
  export type ArtsCollectionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ArtsCollections.
     */
    data: XOR<ArtsCollectionsUpdateManyMutationInput, ArtsCollectionsUncheckedUpdateManyInput>
    /**
     * Filter which ArtsCollections to update
     */
    where?: ArtsCollectionsWhereInput
    /**
     * Limit how many ArtsCollections to update.
     */
    limit?: number
  }

  /**
   * ArtsCollections upsert
   */
  export type ArtsCollectionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtsCollections
     */
    select?: ArtsCollectionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArtsCollections
     */
    omit?: ArtsCollectionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsCollectionsInclude<ExtArgs> | null
    /**
     * The filter to search for the ArtsCollections to update in case it exists.
     */
    where: ArtsCollectionsWhereUniqueInput
    /**
     * In case the ArtsCollections found by the `where` argument doesn't exist, create a new ArtsCollections with this data.
     */
    create: XOR<ArtsCollectionsCreateInput, ArtsCollectionsUncheckedCreateInput>
    /**
     * In case the ArtsCollections was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArtsCollectionsUpdateInput, ArtsCollectionsUncheckedUpdateInput>
  }

  /**
   * ArtsCollections delete
   */
  export type ArtsCollectionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtsCollections
     */
    select?: ArtsCollectionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArtsCollections
     */
    omit?: ArtsCollectionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsCollectionsInclude<ExtArgs> | null
    /**
     * Filter which ArtsCollections to delete.
     */
    where: ArtsCollectionsWhereUniqueInput
  }

  /**
   * ArtsCollections deleteMany
   */
  export type ArtsCollectionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArtsCollections to delete
     */
    where?: ArtsCollectionsWhereInput
    /**
     * Limit how many ArtsCollections to delete.
     */
    limit?: number
  }

  /**
   * ArtsCollections findRaw
   */
  export type ArtsCollectionsFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ArtsCollections aggregateRaw
   */
  export type ArtsCollectionsAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ArtsCollections.arts
   */
  export type ArtsCollections$artsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arts
     */
    select?: ArtsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arts
     */
    omit?: ArtsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsInclude<ExtArgs> | null
    where?: ArtsWhereInput
    orderBy?: ArtsOrderByWithRelationInput | ArtsOrderByWithRelationInput[]
    cursor?: ArtsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtsScalarFieldEnum | ArtsScalarFieldEnum[]
  }

  /**
   * ArtsCollections without action
   */
  export type ArtsCollectionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtsCollections
     */
    select?: ArtsCollectionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArtsCollections
     */
    omit?: ArtsCollectionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtsCollectionsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    firstname: 'firstname',
    lastname: 'lastname',
    email: 'email',
    password: 'password',
    username: 'username',
    bio: 'bio',
    dob: 'dob'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    url: 'url'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const AuthorScalarFieldEnum: {
    id: 'id',
    firstname: 'firstname',
    lastname: 'lastname',
    artsId: 'artsId'
  };

  export type AuthorScalarFieldEnum = (typeof AuthorScalarFieldEnum)[keyof typeof AuthorScalarFieldEnum]


  export const ArtsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    authorId: 'authorId',
    date: 'date',
    annotation: 'annotation',
    userId: 'userId',
    imageId: 'imageId',
    artsCollectionsId: 'artsCollectionsId'
  };

  export type ArtsScalarFieldEnum = (typeof ArtsScalarFieldEnum)[keyof typeof ArtsScalarFieldEnum]


  export const ArtsCollectionsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    artsId: 'artsId'
  };

  export type ArtsCollectionsScalarFieldEnum = (typeof ArtsCollectionsScalarFieldEnum)[keyof typeof ArtsCollectionsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    firstname?: StringFilter<"User"> | string
    lastname?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    username?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    dob?: DateTimeNullableFilter<"User"> | Date | string | null
    favoritesArts?: ArtsListRelationFilter
    collections?: ArtsCollectionsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    bio?: SortOrder
    dob?: SortOrder
    favoritesArts?: ArtsOrderByRelationAggregateInput
    collections?: ArtsCollectionsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstname?: StringFilter<"User"> | string
    lastname?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    bio?: StringNullableFilter<"User"> | string | null
    dob?: DateTimeNullableFilter<"User"> | Date | string | null
    favoritesArts?: ArtsListRelationFilter
    collections?: ArtsCollectionsListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    bio?: SortOrder
    dob?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    firstname?: StringWithAggregatesFilter<"User"> | string
    lastname?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    dob?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type ImageWhereInput = {
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    id?: StringFilter<"Image"> | string
    url?: StringFilter<"Image"> | string
    Arts?: ArtsListRelationFilter
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    Arts?: ArtsOrderByRelationAggregateInput
  }

  export type ImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    url?: StringFilter<"Image"> | string
    Arts?: ArtsListRelationFilter
  }, "id">

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    OR?: ImageScalarWhereWithAggregatesInput[]
    NOT?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Image"> | string
    url?: StringWithAggregatesFilter<"Image"> | string
  }

  export type AuthorWhereInput = {
    AND?: AuthorWhereInput | AuthorWhereInput[]
    OR?: AuthorWhereInput[]
    NOT?: AuthorWhereInput | AuthorWhereInput[]
    id?: StringFilter<"Author"> | string
    firstname?: StringFilter<"Author"> | string
    lastname?: StringNullableFilter<"Author"> | string | null
    artsId?: StringNullableListFilter<"Author">
    arts?: ArtsListRelationFilter
  }

  export type AuthorOrderByWithRelationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    artsId?: SortOrder
    arts?: ArtsOrderByRelationAggregateInput
  }

  export type AuthorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuthorWhereInput | AuthorWhereInput[]
    OR?: AuthorWhereInput[]
    NOT?: AuthorWhereInput | AuthorWhereInput[]
    firstname?: StringFilter<"Author"> | string
    lastname?: StringNullableFilter<"Author"> | string | null
    artsId?: StringNullableListFilter<"Author">
    arts?: ArtsListRelationFilter
  }, "id">

  export type AuthorOrderByWithAggregationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    artsId?: SortOrder
    _count?: AuthorCountOrderByAggregateInput
    _max?: AuthorMaxOrderByAggregateInput
    _min?: AuthorMinOrderByAggregateInput
  }

  export type AuthorScalarWhereWithAggregatesInput = {
    AND?: AuthorScalarWhereWithAggregatesInput | AuthorScalarWhereWithAggregatesInput[]
    OR?: AuthorScalarWhereWithAggregatesInput[]
    NOT?: AuthorScalarWhereWithAggregatesInput | AuthorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Author"> | string
    firstname?: StringWithAggregatesFilter<"Author"> | string
    lastname?: StringNullableWithAggregatesFilter<"Author"> | string | null
    artsId?: StringNullableListFilter<"Author">
  }

  export type ArtsWhereInput = {
    AND?: ArtsWhereInput | ArtsWhereInput[]
    OR?: ArtsWhereInput[]
    NOT?: ArtsWhereInput | ArtsWhereInput[]
    id?: StringFilter<"Arts"> | string
    title?: StringNullableFilter<"Arts"> | string | null
    authorId?: StringNullableListFilter<"Arts">
    date?: DateTimeFilter<"Arts"> | Date | string
    annotation?: StringNullableFilter<"Arts"> | string | null
    userId?: StringNullableFilter<"Arts"> | string | null
    imageId?: StringFilter<"Arts"> | string
    artsCollectionsId?: StringNullableListFilter<"Arts">
    img?: XOR<ImageScalarRelationFilter, ImageWhereInput>
    author?: AuthorListRelationFilter
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    ArtsCollections?: XOR<ArtsCollectionsScalarRelationFilter, ArtsCollectionsWhereInput>
  }

  export type ArtsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
    date?: SortOrder
    annotation?: SortOrder
    userId?: SortOrder
    imageId?: SortOrder
    artsCollectionsId?: SortOrder
    img?: ImageOrderByWithRelationInput
    author?: AuthorOrderByRelationAggregateInput
    User?: UserOrderByWithRelationInput
    ArtsCollections?: ArtsCollectionsOrderByWithRelationInput
  }

  export type ArtsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ArtsWhereInput | ArtsWhereInput[]
    OR?: ArtsWhereInput[]
    NOT?: ArtsWhereInput | ArtsWhereInput[]
    title?: StringNullableFilter<"Arts"> | string | null
    authorId?: StringNullableListFilter<"Arts">
    date?: DateTimeFilter<"Arts"> | Date | string
    annotation?: StringNullableFilter<"Arts"> | string | null
    userId?: StringNullableFilter<"Arts"> | string | null
    imageId?: StringFilter<"Arts"> | string
    artsCollectionsId?: StringNullableListFilter<"Arts">
    img?: XOR<ImageScalarRelationFilter, ImageWhereInput>
    author?: AuthorListRelationFilter
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    ArtsCollections?: XOR<ArtsCollectionsScalarRelationFilter, ArtsCollectionsWhereInput>
  }, "id">

  export type ArtsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
    date?: SortOrder
    annotation?: SortOrder
    userId?: SortOrder
    imageId?: SortOrder
    artsCollectionsId?: SortOrder
    _count?: ArtsCountOrderByAggregateInput
    _max?: ArtsMaxOrderByAggregateInput
    _min?: ArtsMinOrderByAggregateInput
  }

  export type ArtsScalarWhereWithAggregatesInput = {
    AND?: ArtsScalarWhereWithAggregatesInput | ArtsScalarWhereWithAggregatesInput[]
    OR?: ArtsScalarWhereWithAggregatesInput[]
    NOT?: ArtsScalarWhereWithAggregatesInput | ArtsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Arts"> | string
    title?: StringNullableWithAggregatesFilter<"Arts"> | string | null
    authorId?: StringNullableListFilter<"Arts">
    date?: DateTimeWithAggregatesFilter<"Arts"> | Date | string
    annotation?: StringNullableWithAggregatesFilter<"Arts"> | string | null
    userId?: StringNullableWithAggregatesFilter<"Arts"> | string | null
    imageId?: StringWithAggregatesFilter<"Arts"> | string
    artsCollectionsId?: StringNullableListFilter<"Arts">
  }

  export type ArtsCollectionsWhereInput = {
    AND?: ArtsCollectionsWhereInput | ArtsCollectionsWhereInput[]
    OR?: ArtsCollectionsWhereInput[]
    NOT?: ArtsCollectionsWhereInput | ArtsCollectionsWhereInput[]
    id?: StringFilter<"ArtsCollections"> | string
    userId?: StringFilter<"ArtsCollections"> | string
    artsId?: StringFilter<"ArtsCollections"> | string
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    arts?: ArtsListRelationFilter
  }

  export type ArtsCollectionsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    artsId?: SortOrder
    User?: UserOrderByWithRelationInput
    arts?: ArtsOrderByRelationAggregateInput
  }

  export type ArtsCollectionsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ArtsCollectionsWhereInput | ArtsCollectionsWhereInput[]
    OR?: ArtsCollectionsWhereInput[]
    NOT?: ArtsCollectionsWhereInput | ArtsCollectionsWhereInput[]
    userId?: StringFilter<"ArtsCollections"> | string
    artsId?: StringFilter<"ArtsCollections"> | string
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    arts?: ArtsListRelationFilter
  }, "id">

  export type ArtsCollectionsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    artsId?: SortOrder
    _count?: ArtsCollectionsCountOrderByAggregateInput
    _max?: ArtsCollectionsMaxOrderByAggregateInput
    _min?: ArtsCollectionsMinOrderByAggregateInput
  }

  export type ArtsCollectionsScalarWhereWithAggregatesInput = {
    AND?: ArtsCollectionsScalarWhereWithAggregatesInput | ArtsCollectionsScalarWhereWithAggregatesInput[]
    OR?: ArtsCollectionsScalarWhereWithAggregatesInput[]
    NOT?: ArtsCollectionsScalarWhereWithAggregatesInput | ArtsCollectionsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ArtsCollections"> | string
    userId?: StringWithAggregatesFilter<"ArtsCollections"> | string
    artsId?: StringWithAggregatesFilter<"ArtsCollections"> | string
  }

  export type UserCreateInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    password: string
    username?: string | null
    bio?: string | null
    dob?: Date | string | null
    favoritesArts?: ArtsCreateNestedManyWithoutUserInput
    collections?: ArtsCollectionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    password: string
    username?: string | null
    bio?: string | null
    dob?: Date | string | null
    favoritesArts?: ArtsUncheckedCreateNestedManyWithoutUserInput
    collections?: ArtsCollectionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favoritesArts?: ArtsUpdateManyWithoutUserNestedInput
    collections?: ArtsCollectionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favoritesArts?: ArtsUncheckedUpdateManyWithoutUserNestedInput
    collections?: ArtsCollectionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    password: string
    username?: string | null
    bio?: string | null
    dob?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ImageCreateInput = {
    id?: string
    url: string
    Arts?: ArtsCreateNestedManyWithoutImgInput
  }

  export type ImageUncheckedCreateInput = {
    id?: string
    url: string
    Arts?: ArtsUncheckedCreateNestedManyWithoutImgInput
  }

  export type ImageUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    Arts?: ArtsUpdateManyWithoutImgNestedInput
  }

  export type ImageUncheckedUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    Arts?: ArtsUncheckedUpdateManyWithoutImgNestedInput
  }

  export type ImageCreateManyInput = {
    id?: string
    url: string
  }

  export type ImageUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUncheckedUpdateManyInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type AuthorCreateInput = {
    id?: string
    firstname: string
    lastname?: string | null
    arts?: ArtsCreateNestedManyWithoutAuthorInput
  }

  export type AuthorUncheckedCreateInput = {
    id?: string
    firstname: string
    lastname?: string | null
    artsId?: AuthorCreateartsIdInput | string[]
    arts?: ArtsUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type AuthorUpdateInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    arts?: ArtsUpdateManyWithoutAuthorNestedInput
  }

  export type AuthorUncheckedUpdateInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    artsId?: AuthorUpdateartsIdInput | string[]
    arts?: ArtsUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type AuthorCreateManyInput = {
    id?: string
    firstname: string
    lastname?: string | null
    artsId?: AuthorCreateartsIdInput | string[]
  }

  export type AuthorUpdateManyMutationInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthorUncheckedUpdateManyInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    artsId?: AuthorUpdateartsIdInput | string[]
  }

  export type ArtsCreateInput = {
    id?: string
    title?: string | null
    date: Date | string
    annotation?: string | null
    img: ImageCreateNestedOneWithoutArtsInput
    author?: AuthorCreateNestedManyWithoutArtsInput
    User?: UserCreateNestedOneWithoutFavoritesArtsInput
    ArtsCollections: ArtsCollectionsCreateNestedOneWithoutArtsInput
  }

  export type ArtsUncheckedCreateInput = {
    id?: string
    title?: string | null
    authorId?: ArtsCreateauthorIdInput | string[]
    date: Date | string
    annotation?: string | null
    userId?: string | null
    imageId: string
    artsCollectionsId?: ArtsCreateartsCollectionsIdInput | string[]
    author?: AuthorUncheckedCreateNestedManyWithoutArtsInput
  }

  export type ArtsUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    annotation?: NullableStringFieldUpdateOperationsInput | string | null
    img?: ImageUpdateOneRequiredWithoutArtsNestedInput
    author?: AuthorUpdateManyWithoutArtsNestedInput
    User?: UserUpdateOneWithoutFavoritesArtsNestedInput
    ArtsCollections?: ArtsCollectionsUpdateOneRequiredWithoutArtsNestedInput
  }

  export type ArtsUncheckedUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: ArtsUpdateauthorIdInput | string[]
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    annotation?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    imageId?: StringFieldUpdateOperationsInput | string
    artsCollectionsId?: ArtsUpdateartsCollectionsIdInput | string[]
    author?: AuthorUncheckedUpdateManyWithoutArtsNestedInput
  }

  export type ArtsCreateManyInput = {
    id?: string
    title?: string | null
    authorId?: ArtsCreateauthorIdInput | string[]
    date: Date | string
    annotation?: string | null
    userId?: string | null
    imageId: string
    artsCollectionsId?: ArtsCreateartsCollectionsIdInput | string[]
  }

  export type ArtsUpdateManyMutationInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    annotation?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ArtsUncheckedUpdateManyInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: ArtsUpdateauthorIdInput | string[]
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    annotation?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    imageId?: StringFieldUpdateOperationsInput | string
    artsCollectionsId?: ArtsUpdateartsCollectionsIdInput | string[]
  }

  export type ArtsCollectionsCreateInput = {
    id?: string
    artsId: string
    User: UserCreateNestedOneWithoutCollectionsInput
    arts?: ArtsCreateNestedManyWithoutArtsCollectionsInput
  }

  export type ArtsCollectionsUncheckedCreateInput = {
    id?: string
    userId: string
    artsId: string
    arts?: ArtsUncheckedCreateNestedManyWithoutArtsCollectionsInput
  }

  export type ArtsCollectionsUpdateInput = {
    artsId?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutCollectionsNestedInput
    arts?: ArtsUpdateManyWithoutArtsCollectionsNestedInput
  }

  export type ArtsCollectionsUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    artsId?: StringFieldUpdateOperationsInput | string
    arts?: ArtsUncheckedUpdateManyWithoutArtsCollectionsNestedInput
  }

  export type ArtsCollectionsCreateManyInput = {
    id?: string
    userId: string
    artsId: string
  }

  export type ArtsCollectionsUpdateManyMutationInput = {
    artsId?: StringFieldUpdateOperationsInput | string
  }

  export type ArtsCollectionsUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    artsId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type ArtsListRelationFilter = {
    every?: ArtsWhereInput
    some?: ArtsWhereInput
    none?: ArtsWhereInput
  }

  export type ArtsCollectionsListRelationFilter = {
    every?: ArtsCollectionsWhereInput
    some?: ArtsCollectionsWhereInput
    none?: ArtsCollectionsWhereInput
  }

  export type ArtsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArtsCollectionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    bio?: SortOrder
    dob?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    bio?: SortOrder
    dob?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    bio?: SortOrder
    dob?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type AuthorCountOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    artsId?: SortOrder
  }

  export type AuthorMaxOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
  }

  export type AuthorMinOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ImageScalarRelationFilter = {
    is?: ImageWhereInput
    isNot?: ImageWhereInput
  }

  export type AuthorListRelationFilter = {
    every?: AuthorWhereInput
    some?: AuthorWhereInput
    none?: AuthorWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ArtsCollectionsScalarRelationFilter = {
    is?: ArtsCollectionsWhereInput
    isNot?: ArtsCollectionsWhereInput
  }

  export type AuthorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArtsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
    date?: SortOrder
    annotation?: SortOrder
    userId?: SortOrder
    imageId?: SortOrder
    artsCollectionsId?: SortOrder
  }

  export type ArtsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    annotation?: SortOrder
    userId?: SortOrder
    imageId?: SortOrder
  }

  export type ArtsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    date?: SortOrder
    annotation?: SortOrder
    userId?: SortOrder
    imageId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ArtsCollectionsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artsId?: SortOrder
  }

  export type ArtsCollectionsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artsId?: SortOrder
  }

  export type ArtsCollectionsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    artsId?: SortOrder
  }

  export type ArtsCreateNestedManyWithoutUserInput = {
    create?: XOR<ArtsCreateWithoutUserInput, ArtsUncheckedCreateWithoutUserInput> | ArtsCreateWithoutUserInput[] | ArtsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ArtsCreateOrConnectWithoutUserInput | ArtsCreateOrConnectWithoutUserInput[]
    createMany?: ArtsCreateManyUserInputEnvelope
    connect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
  }

  export type ArtsCollectionsCreateNestedManyWithoutUserInput = {
    create?: XOR<ArtsCollectionsCreateWithoutUserInput, ArtsCollectionsUncheckedCreateWithoutUserInput> | ArtsCollectionsCreateWithoutUserInput[] | ArtsCollectionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ArtsCollectionsCreateOrConnectWithoutUserInput | ArtsCollectionsCreateOrConnectWithoutUserInput[]
    createMany?: ArtsCollectionsCreateManyUserInputEnvelope
    connect?: ArtsCollectionsWhereUniqueInput | ArtsCollectionsWhereUniqueInput[]
  }

  export type ArtsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ArtsCreateWithoutUserInput, ArtsUncheckedCreateWithoutUserInput> | ArtsCreateWithoutUserInput[] | ArtsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ArtsCreateOrConnectWithoutUserInput | ArtsCreateOrConnectWithoutUserInput[]
    createMany?: ArtsCreateManyUserInputEnvelope
    connect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
  }

  export type ArtsCollectionsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ArtsCollectionsCreateWithoutUserInput, ArtsCollectionsUncheckedCreateWithoutUserInput> | ArtsCollectionsCreateWithoutUserInput[] | ArtsCollectionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ArtsCollectionsCreateOrConnectWithoutUserInput | ArtsCollectionsCreateOrConnectWithoutUserInput[]
    createMany?: ArtsCollectionsCreateManyUserInputEnvelope
    connect?: ArtsCollectionsWhereUniqueInput | ArtsCollectionsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type ArtsUpdateManyWithoutUserNestedInput = {
    create?: XOR<ArtsCreateWithoutUserInput, ArtsUncheckedCreateWithoutUserInput> | ArtsCreateWithoutUserInput[] | ArtsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ArtsCreateOrConnectWithoutUserInput | ArtsCreateOrConnectWithoutUserInput[]
    upsert?: ArtsUpsertWithWhereUniqueWithoutUserInput | ArtsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ArtsCreateManyUserInputEnvelope
    set?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    disconnect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    delete?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    connect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    update?: ArtsUpdateWithWhereUniqueWithoutUserInput | ArtsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ArtsUpdateManyWithWhereWithoutUserInput | ArtsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ArtsScalarWhereInput | ArtsScalarWhereInput[]
  }

  export type ArtsCollectionsUpdateManyWithoutUserNestedInput = {
    create?: XOR<ArtsCollectionsCreateWithoutUserInput, ArtsCollectionsUncheckedCreateWithoutUserInput> | ArtsCollectionsCreateWithoutUserInput[] | ArtsCollectionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ArtsCollectionsCreateOrConnectWithoutUserInput | ArtsCollectionsCreateOrConnectWithoutUserInput[]
    upsert?: ArtsCollectionsUpsertWithWhereUniqueWithoutUserInput | ArtsCollectionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ArtsCollectionsCreateManyUserInputEnvelope
    set?: ArtsCollectionsWhereUniqueInput | ArtsCollectionsWhereUniqueInput[]
    disconnect?: ArtsCollectionsWhereUniqueInput | ArtsCollectionsWhereUniqueInput[]
    delete?: ArtsCollectionsWhereUniqueInput | ArtsCollectionsWhereUniqueInput[]
    connect?: ArtsCollectionsWhereUniqueInput | ArtsCollectionsWhereUniqueInput[]
    update?: ArtsCollectionsUpdateWithWhereUniqueWithoutUserInput | ArtsCollectionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ArtsCollectionsUpdateManyWithWhereWithoutUserInput | ArtsCollectionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ArtsCollectionsScalarWhereInput | ArtsCollectionsScalarWhereInput[]
  }

  export type ArtsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ArtsCreateWithoutUserInput, ArtsUncheckedCreateWithoutUserInput> | ArtsCreateWithoutUserInput[] | ArtsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ArtsCreateOrConnectWithoutUserInput | ArtsCreateOrConnectWithoutUserInput[]
    upsert?: ArtsUpsertWithWhereUniqueWithoutUserInput | ArtsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ArtsCreateManyUserInputEnvelope
    set?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    disconnect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    delete?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    connect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    update?: ArtsUpdateWithWhereUniqueWithoutUserInput | ArtsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ArtsUpdateManyWithWhereWithoutUserInput | ArtsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ArtsScalarWhereInput | ArtsScalarWhereInput[]
  }

  export type ArtsCollectionsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ArtsCollectionsCreateWithoutUserInput, ArtsCollectionsUncheckedCreateWithoutUserInput> | ArtsCollectionsCreateWithoutUserInput[] | ArtsCollectionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ArtsCollectionsCreateOrConnectWithoutUserInput | ArtsCollectionsCreateOrConnectWithoutUserInput[]
    upsert?: ArtsCollectionsUpsertWithWhereUniqueWithoutUserInput | ArtsCollectionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ArtsCollectionsCreateManyUserInputEnvelope
    set?: ArtsCollectionsWhereUniqueInput | ArtsCollectionsWhereUniqueInput[]
    disconnect?: ArtsCollectionsWhereUniqueInput | ArtsCollectionsWhereUniqueInput[]
    delete?: ArtsCollectionsWhereUniqueInput | ArtsCollectionsWhereUniqueInput[]
    connect?: ArtsCollectionsWhereUniqueInput | ArtsCollectionsWhereUniqueInput[]
    update?: ArtsCollectionsUpdateWithWhereUniqueWithoutUserInput | ArtsCollectionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ArtsCollectionsUpdateManyWithWhereWithoutUserInput | ArtsCollectionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ArtsCollectionsScalarWhereInput | ArtsCollectionsScalarWhereInput[]
  }

  export type ArtsCreateNestedManyWithoutImgInput = {
    create?: XOR<ArtsCreateWithoutImgInput, ArtsUncheckedCreateWithoutImgInput> | ArtsCreateWithoutImgInput[] | ArtsUncheckedCreateWithoutImgInput[]
    connectOrCreate?: ArtsCreateOrConnectWithoutImgInput | ArtsCreateOrConnectWithoutImgInput[]
    createMany?: ArtsCreateManyImgInputEnvelope
    connect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
  }

  export type ArtsUncheckedCreateNestedManyWithoutImgInput = {
    create?: XOR<ArtsCreateWithoutImgInput, ArtsUncheckedCreateWithoutImgInput> | ArtsCreateWithoutImgInput[] | ArtsUncheckedCreateWithoutImgInput[]
    connectOrCreate?: ArtsCreateOrConnectWithoutImgInput | ArtsCreateOrConnectWithoutImgInput[]
    createMany?: ArtsCreateManyImgInputEnvelope
    connect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
  }

  export type ArtsUpdateManyWithoutImgNestedInput = {
    create?: XOR<ArtsCreateWithoutImgInput, ArtsUncheckedCreateWithoutImgInput> | ArtsCreateWithoutImgInput[] | ArtsUncheckedCreateWithoutImgInput[]
    connectOrCreate?: ArtsCreateOrConnectWithoutImgInput | ArtsCreateOrConnectWithoutImgInput[]
    upsert?: ArtsUpsertWithWhereUniqueWithoutImgInput | ArtsUpsertWithWhereUniqueWithoutImgInput[]
    createMany?: ArtsCreateManyImgInputEnvelope
    set?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    disconnect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    delete?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    connect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    update?: ArtsUpdateWithWhereUniqueWithoutImgInput | ArtsUpdateWithWhereUniqueWithoutImgInput[]
    updateMany?: ArtsUpdateManyWithWhereWithoutImgInput | ArtsUpdateManyWithWhereWithoutImgInput[]
    deleteMany?: ArtsScalarWhereInput | ArtsScalarWhereInput[]
  }

  export type ArtsUncheckedUpdateManyWithoutImgNestedInput = {
    create?: XOR<ArtsCreateWithoutImgInput, ArtsUncheckedCreateWithoutImgInput> | ArtsCreateWithoutImgInput[] | ArtsUncheckedCreateWithoutImgInput[]
    connectOrCreate?: ArtsCreateOrConnectWithoutImgInput | ArtsCreateOrConnectWithoutImgInput[]
    upsert?: ArtsUpsertWithWhereUniqueWithoutImgInput | ArtsUpsertWithWhereUniqueWithoutImgInput[]
    createMany?: ArtsCreateManyImgInputEnvelope
    set?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    disconnect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    delete?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    connect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    update?: ArtsUpdateWithWhereUniqueWithoutImgInput | ArtsUpdateWithWhereUniqueWithoutImgInput[]
    updateMany?: ArtsUpdateManyWithWhereWithoutImgInput | ArtsUpdateManyWithWhereWithoutImgInput[]
    deleteMany?: ArtsScalarWhereInput | ArtsScalarWhereInput[]
  }

  export type ArtsCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ArtsCreateWithoutAuthorInput, ArtsUncheckedCreateWithoutAuthorInput> | ArtsCreateWithoutAuthorInput[] | ArtsUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ArtsCreateOrConnectWithoutAuthorInput | ArtsCreateOrConnectWithoutAuthorInput[]
    connect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
  }

  export type AuthorCreateartsIdInput = {
    set: string[]
  }

  export type ArtsUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<ArtsCreateWithoutAuthorInput, ArtsUncheckedCreateWithoutAuthorInput> | ArtsCreateWithoutAuthorInput[] | ArtsUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ArtsCreateOrConnectWithoutAuthorInput | ArtsCreateOrConnectWithoutAuthorInput[]
    connect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
  }

  export type ArtsUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ArtsCreateWithoutAuthorInput, ArtsUncheckedCreateWithoutAuthorInput> | ArtsCreateWithoutAuthorInput[] | ArtsUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ArtsCreateOrConnectWithoutAuthorInput | ArtsCreateOrConnectWithoutAuthorInput[]
    upsert?: ArtsUpsertWithWhereUniqueWithoutAuthorInput | ArtsUpsertWithWhereUniqueWithoutAuthorInput[]
    set?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    disconnect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    delete?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    connect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    update?: ArtsUpdateWithWhereUniqueWithoutAuthorInput | ArtsUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ArtsUpdateManyWithWhereWithoutAuthorInput | ArtsUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ArtsScalarWhereInput | ArtsScalarWhereInput[]
  }

  export type AuthorUpdateartsIdInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ArtsUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<ArtsCreateWithoutAuthorInput, ArtsUncheckedCreateWithoutAuthorInput> | ArtsCreateWithoutAuthorInput[] | ArtsUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: ArtsCreateOrConnectWithoutAuthorInput | ArtsCreateOrConnectWithoutAuthorInput[]
    upsert?: ArtsUpsertWithWhereUniqueWithoutAuthorInput | ArtsUpsertWithWhereUniqueWithoutAuthorInput[]
    set?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    disconnect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    delete?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    connect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    update?: ArtsUpdateWithWhereUniqueWithoutAuthorInput | ArtsUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: ArtsUpdateManyWithWhereWithoutAuthorInput | ArtsUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: ArtsScalarWhereInput | ArtsScalarWhereInput[]
  }

  export type ImageCreateNestedOneWithoutArtsInput = {
    create?: XOR<ImageCreateWithoutArtsInput, ImageUncheckedCreateWithoutArtsInput>
    connectOrCreate?: ImageCreateOrConnectWithoutArtsInput
    connect?: ImageWhereUniqueInput
  }

  export type AuthorCreateNestedManyWithoutArtsInput = {
    create?: XOR<AuthorCreateWithoutArtsInput, AuthorUncheckedCreateWithoutArtsInput> | AuthorCreateWithoutArtsInput[] | AuthorUncheckedCreateWithoutArtsInput[]
    connectOrCreate?: AuthorCreateOrConnectWithoutArtsInput | AuthorCreateOrConnectWithoutArtsInput[]
    connect?: AuthorWhereUniqueInput | AuthorWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutFavoritesArtsInput = {
    create?: XOR<UserCreateWithoutFavoritesArtsInput, UserUncheckedCreateWithoutFavoritesArtsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesArtsInput
    connect?: UserWhereUniqueInput
  }

  export type ArtsCollectionsCreateNestedOneWithoutArtsInput = {
    create?: XOR<ArtsCollectionsCreateWithoutArtsInput, ArtsCollectionsUncheckedCreateWithoutArtsInput>
    connectOrCreate?: ArtsCollectionsCreateOrConnectWithoutArtsInput
    connect?: ArtsCollectionsWhereUniqueInput
  }

  export type ArtsCreateauthorIdInput = {
    set: string[]
  }

  export type ArtsCreateartsCollectionsIdInput = {
    set: string[]
  }

  export type AuthorUncheckedCreateNestedManyWithoutArtsInput = {
    create?: XOR<AuthorCreateWithoutArtsInput, AuthorUncheckedCreateWithoutArtsInput> | AuthorCreateWithoutArtsInput[] | AuthorUncheckedCreateWithoutArtsInput[]
    connectOrCreate?: AuthorCreateOrConnectWithoutArtsInput | AuthorCreateOrConnectWithoutArtsInput[]
    connect?: AuthorWhereUniqueInput | AuthorWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ImageUpdateOneRequiredWithoutArtsNestedInput = {
    create?: XOR<ImageCreateWithoutArtsInput, ImageUncheckedCreateWithoutArtsInput>
    connectOrCreate?: ImageCreateOrConnectWithoutArtsInput
    upsert?: ImageUpsertWithoutArtsInput
    connect?: ImageWhereUniqueInput
    update?: XOR<XOR<ImageUpdateToOneWithWhereWithoutArtsInput, ImageUpdateWithoutArtsInput>, ImageUncheckedUpdateWithoutArtsInput>
  }

  export type AuthorUpdateManyWithoutArtsNestedInput = {
    create?: XOR<AuthorCreateWithoutArtsInput, AuthorUncheckedCreateWithoutArtsInput> | AuthorCreateWithoutArtsInput[] | AuthorUncheckedCreateWithoutArtsInput[]
    connectOrCreate?: AuthorCreateOrConnectWithoutArtsInput | AuthorCreateOrConnectWithoutArtsInput[]
    upsert?: AuthorUpsertWithWhereUniqueWithoutArtsInput | AuthorUpsertWithWhereUniqueWithoutArtsInput[]
    set?: AuthorWhereUniqueInput | AuthorWhereUniqueInput[]
    disconnect?: AuthorWhereUniqueInput | AuthorWhereUniqueInput[]
    delete?: AuthorWhereUniqueInput | AuthorWhereUniqueInput[]
    connect?: AuthorWhereUniqueInput | AuthorWhereUniqueInput[]
    update?: AuthorUpdateWithWhereUniqueWithoutArtsInput | AuthorUpdateWithWhereUniqueWithoutArtsInput[]
    updateMany?: AuthorUpdateManyWithWhereWithoutArtsInput | AuthorUpdateManyWithWhereWithoutArtsInput[]
    deleteMany?: AuthorScalarWhereInput | AuthorScalarWhereInput[]
  }

  export type UserUpdateOneWithoutFavoritesArtsNestedInput = {
    create?: XOR<UserCreateWithoutFavoritesArtsInput, UserUncheckedCreateWithoutFavoritesArtsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesArtsInput
    upsert?: UserUpsertWithoutFavoritesArtsInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoritesArtsInput, UserUpdateWithoutFavoritesArtsInput>, UserUncheckedUpdateWithoutFavoritesArtsInput>
  }

  export type ArtsCollectionsUpdateOneRequiredWithoutArtsNestedInput = {
    create?: XOR<ArtsCollectionsCreateWithoutArtsInput, ArtsCollectionsUncheckedCreateWithoutArtsInput>
    connectOrCreate?: ArtsCollectionsCreateOrConnectWithoutArtsInput
    upsert?: ArtsCollectionsUpsertWithoutArtsInput
    connect?: ArtsCollectionsWhereUniqueInput
    update?: XOR<XOR<ArtsCollectionsUpdateToOneWithWhereWithoutArtsInput, ArtsCollectionsUpdateWithoutArtsInput>, ArtsCollectionsUncheckedUpdateWithoutArtsInput>
  }

  export type ArtsUpdateauthorIdInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ArtsUpdateartsCollectionsIdInput = {
    set?: string[]
    push?: string | string[]
  }

  export type AuthorUncheckedUpdateManyWithoutArtsNestedInput = {
    create?: XOR<AuthorCreateWithoutArtsInput, AuthorUncheckedCreateWithoutArtsInput> | AuthorCreateWithoutArtsInput[] | AuthorUncheckedCreateWithoutArtsInput[]
    connectOrCreate?: AuthorCreateOrConnectWithoutArtsInput | AuthorCreateOrConnectWithoutArtsInput[]
    upsert?: AuthorUpsertWithWhereUniqueWithoutArtsInput | AuthorUpsertWithWhereUniqueWithoutArtsInput[]
    set?: AuthorWhereUniqueInput | AuthorWhereUniqueInput[]
    disconnect?: AuthorWhereUniqueInput | AuthorWhereUniqueInput[]
    delete?: AuthorWhereUniqueInput | AuthorWhereUniqueInput[]
    connect?: AuthorWhereUniqueInput | AuthorWhereUniqueInput[]
    update?: AuthorUpdateWithWhereUniqueWithoutArtsInput | AuthorUpdateWithWhereUniqueWithoutArtsInput[]
    updateMany?: AuthorUpdateManyWithWhereWithoutArtsInput | AuthorUpdateManyWithWhereWithoutArtsInput[]
    deleteMany?: AuthorScalarWhereInput | AuthorScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCollectionsInput = {
    create?: XOR<UserCreateWithoutCollectionsInput, UserUncheckedCreateWithoutCollectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCollectionsInput
    connect?: UserWhereUniqueInput
  }

  export type ArtsCreateNestedManyWithoutArtsCollectionsInput = {
    create?: XOR<ArtsCreateWithoutArtsCollectionsInput, ArtsUncheckedCreateWithoutArtsCollectionsInput> | ArtsCreateWithoutArtsCollectionsInput[] | ArtsUncheckedCreateWithoutArtsCollectionsInput[]
    connectOrCreate?: ArtsCreateOrConnectWithoutArtsCollectionsInput | ArtsCreateOrConnectWithoutArtsCollectionsInput[]
    createMany?: ArtsCreateManyArtsCollectionsInputEnvelope
    connect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
  }

  export type ArtsUncheckedCreateNestedManyWithoutArtsCollectionsInput = {
    create?: XOR<ArtsCreateWithoutArtsCollectionsInput, ArtsUncheckedCreateWithoutArtsCollectionsInput> | ArtsCreateWithoutArtsCollectionsInput[] | ArtsUncheckedCreateWithoutArtsCollectionsInput[]
    connectOrCreate?: ArtsCreateOrConnectWithoutArtsCollectionsInput | ArtsCreateOrConnectWithoutArtsCollectionsInput[]
    createMany?: ArtsCreateManyArtsCollectionsInputEnvelope
    connect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCollectionsNestedInput = {
    create?: XOR<UserCreateWithoutCollectionsInput, UserUncheckedCreateWithoutCollectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCollectionsInput
    upsert?: UserUpsertWithoutCollectionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCollectionsInput, UserUpdateWithoutCollectionsInput>, UserUncheckedUpdateWithoutCollectionsInput>
  }

  export type ArtsUpdateManyWithoutArtsCollectionsNestedInput = {
    create?: XOR<ArtsCreateWithoutArtsCollectionsInput, ArtsUncheckedCreateWithoutArtsCollectionsInput> | ArtsCreateWithoutArtsCollectionsInput[] | ArtsUncheckedCreateWithoutArtsCollectionsInput[]
    connectOrCreate?: ArtsCreateOrConnectWithoutArtsCollectionsInput | ArtsCreateOrConnectWithoutArtsCollectionsInput[]
    upsert?: ArtsUpsertWithWhereUniqueWithoutArtsCollectionsInput | ArtsUpsertWithWhereUniqueWithoutArtsCollectionsInput[]
    createMany?: ArtsCreateManyArtsCollectionsInputEnvelope
    set?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    disconnect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    delete?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    connect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    update?: ArtsUpdateWithWhereUniqueWithoutArtsCollectionsInput | ArtsUpdateWithWhereUniqueWithoutArtsCollectionsInput[]
    updateMany?: ArtsUpdateManyWithWhereWithoutArtsCollectionsInput | ArtsUpdateManyWithWhereWithoutArtsCollectionsInput[]
    deleteMany?: ArtsScalarWhereInput | ArtsScalarWhereInput[]
  }

  export type ArtsUncheckedUpdateManyWithoutArtsCollectionsNestedInput = {
    create?: XOR<ArtsCreateWithoutArtsCollectionsInput, ArtsUncheckedCreateWithoutArtsCollectionsInput> | ArtsCreateWithoutArtsCollectionsInput[] | ArtsUncheckedCreateWithoutArtsCollectionsInput[]
    connectOrCreate?: ArtsCreateOrConnectWithoutArtsCollectionsInput | ArtsCreateOrConnectWithoutArtsCollectionsInput[]
    upsert?: ArtsUpsertWithWhereUniqueWithoutArtsCollectionsInput | ArtsUpsertWithWhereUniqueWithoutArtsCollectionsInput[]
    createMany?: ArtsCreateManyArtsCollectionsInputEnvelope
    set?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    disconnect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    delete?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    connect?: ArtsWhereUniqueInput | ArtsWhereUniqueInput[]
    update?: ArtsUpdateWithWhereUniqueWithoutArtsCollectionsInput | ArtsUpdateWithWhereUniqueWithoutArtsCollectionsInput[]
    updateMany?: ArtsUpdateManyWithWhereWithoutArtsCollectionsInput | ArtsUpdateManyWithWhereWithoutArtsCollectionsInput[]
    deleteMany?: ArtsScalarWhereInput | ArtsScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ArtsCreateWithoutUserInput = {
    id?: string
    title?: string | null
    date: Date | string
    annotation?: string | null
    img: ImageCreateNestedOneWithoutArtsInput
    author?: AuthorCreateNestedManyWithoutArtsInput
    ArtsCollections: ArtsCollectionsCreateNestedOneWithoutArtsInput
  }

  export type ArtsUncheckedCreateWithoutUserInput = {
    id?: string
    title?: string | null
    authorId?: ArtsCreateauthorIdInput | string[]
    date: Date | string
    annotation?: string | null
    imageId: string
    artsCollectionsId?: ArtsCreateartsCollectionsIdInput | string[]
    author?: AuthorUncheckedCreateNestedManyWithoutArtsInput
  }

  export type ArtsCreateOrConnectWithoutUserInput = {
    where: ArtsWhereUniqueInput
    create: XOR<ArtsCreateWithoutUserInput, ArtsUncheckedCreateWithoutUserInput>
  }

  export type ArtsCreateManyUserInputEnvelope = {
    data: ArtsCreateManyUserInput | ArtsCreateManyUserInput[]
  }

  export type ArtsCollectionsCreateWithoutUserInput = {
    id?: string
    artsId: string
    arts?: ArtsCreateNestedManyWithoutArtsCollectionsInput
  }

  export type ArtsCollectionsUncheckedCreateWithoutUserInput = {
    id?: string
    artsId: string
    arts?: ArtsUncheckedCreateNestedManyWithoutArtsCollectionsInput
  }

  export type ArtsCollectionsCreateOrConnectWithoutUserInput = {
    where: ArtsCollectionsWhereUniqueInput
    create: XOR<ArtsCollectionsCreateWithoutUserInput, ArtsCollectionsUncheckedCreateWithoutUserInput>
  }

  export type ArtsCollectionsCreateManyUserInputEnvelope = {
    data: ArtsCollectionsCreateManyUserInput | ArtsCollectionsCreateManyUserInput[]
  }

  export type ArtsUpsertWithWhereUniqueWithoutUserInput = {
    where: ArtsWhereUniqueInput
    update: XOR<ArtsUpdateWithoutUserInput, ArtsUncheckedUpdateWithoutUserInput>
    create: XOR<ArtsCreateWithoutUserInput, ArtsUncheckedCreateWithoutUserInput>
  }

  export type ArtsUpdateWithWhereUniqueWithoutUserInput = {
    where: ArtsWhereUniqueInput
    data: XOR<ArtsUpdateWithoutUserInput, ArtsUncheckedUpdateWithoutUserInput>
  }

  export type ArtsUpdateManyWithWhereWithoutUserInput = {
    where: ArtsScalarWhereInput
    data: XOR<ArtsUpdateManyMutationInput, ArtsUncheckedUpdateManyWithoutUserInput>
  }

  export type ArtsScalarWhereInput = {
    AND?: ArtsScalarWhereInput | ArtsScalarWhereInput[]
    OR?: ArtsScalarWhereInput[]
    NOT?: ArtsScalarWhereInput | ArtsScalarWhereInput[]
    id?: StringFilter<"Arts"> | string
    title?: StringNullableFilter<"Arts"> | string | null
    authorId?: StringNullableListFilter<"Arts">
    date?: DateTimeFilter<"Arts"> | Date | string
    annotation?: StringNullableFilter<"Arts"> | string | null
    userId?: StringNullableFilter<"Arts"> | string | null
    imageId?: StringFilter<"Arts"> | string
    artsCollectionsId?: StringNullableListFilter<"Arts">
  }

  export type ArtsCollectionsUpsertWithWhereUniqueWithoutUserInput = {
    where: ArtsCollectionsWhereUniqueInput
    update: XOR<ArtsCollectionsUpdateWithoutUserInput, ArtsCollectionsUncheckedUpdateWithoutUserInput>
    create: XOR<ArtsCollectionsCreateWithoutUserInput, ArtsCollectionsUncheckedCreateWithoutUserInput>
  }

  export type ArtsCollectionsUpdateWithWhereUniqueWithoutUserInput = {
    where: ArtsCollectionsWhereUniqueInput
    data: XOR<ArtsCollectionsUpdateWithoutUserInput, ArtsCollectionsUncheckedUpdateWithoutUserInput>
  }

  export type ArtsCollectionsUpdateManyWithWhereWithoutUserInput = {
    where: ArtsCollectionsScalarWhereInput
    data: XOR<ArtsCollectionsUpdateManyMutationInput, ArtsCollectionsUncheckedUpdateManyWithoutUserInput>
  }

  export type ArtsCollectionsScalarWhereInput = {
    AND?: ArtsCollectionsScalarWhereInput | ArtsCollectionsScalarWhereInput[]
    OR?: ArtsCollectionsScalarWhereInput[]
    NOT?: ArtsCollectionsScalarWhereInput | ArtsCollectionsScalarWhereInput[]
    id?: StringFilter<"ArtsCollections"> | string
    userId?: StringFilter<"ArtsCollections"> | string
    artsId?: StringFilter<"ArtsCollections"> | string
  }

  export type ArtsCreateWithoutImgInput = {
    id?: string
    title?: string | null
    date: Date | string
    annotation?: string | null
    author?: AuthorCreateNestedManyWithoutArtsInput
    User?: UserCreateNestedOneWithoutFavoritesArtsInput
    ArtsCollections: ArtsCollectionsCreateNestedOneWithoutArtsInput
  }

  export type ArtsUncheckedCreateWithoutImgInput = {
    id?: string
    title?: string | null
    authorId?: ArtsCreateauthorIdInput | string[]
    date: Date | string
    annotation?: string | null
    userId?: string | null
    artsCollectionsId?: ArtsCreateartsCollectionsIdInput | string[]
    author?: AuthorUncheckedCreateNestedManyWithoutArtsInput
  }

  export type ArtsCreateOrConnectWithoutImgInput = {
    where: ArtsWhereUniqueInput
    create: XOR<ArtsCreateWithoutImgInput, ArtsUncheckedCreateWithoutImgInput>
  }

  export type ArtsCreateManyImgInputEnvelope = {
    data: ArtsCreateManyImgInput | ArtsCreateManyImgInput[]
  }

  export type ArtsUpsertWithWhereUniqueWithoutImgInput = {
    where: ArtsWhereUniqueInput
    update: XOR<ArtsUpdateWithoutImgInput, ArtsUncheckedUpdateWithoutImgInput>
    create: XOR<ArtsCreateWithoutImgInput, ArtsUncheckedCreateWithoutImgInput>
  }

  export type ArtsUpdateWithWhereUniqueWithoutImgInput = {
    where: ArtsWhereUniqueInput
    data: XOR<ArtsUpdateWithoutImgInput, ArtsUncheckedUpdateWithoutImgInput>
  }

  export type ArtsUpdateManyWithWhereWithoutImgInput = {
    where: ArtsScalarWhereInput
    data: XOR<ArtsUpdateManyMutationInput, ArtsUncheckedUpdateManyWithoutImgInput>
  }

  export type ArtsCreateWithoutAuthorInput = {
    id?: string
    title?: string | null
    date: Date | string
    annotation?: string | null
    img: ImageCreateNestedOneWithoutArtsInput
    User?: UserCreateNestedOneWithoutFavoritesArtsInput
    ArtsCollections: ArtsCollectionsCreateNestedOneWithoutArtsInput
  }

  export type ArtsUncheckedCreateWithoutAuthorInput = {
    id?: string
    title?: string | null
    authorId?: ArtsCreateauthorIdInput | string[]
    date: Date | string
    annotation?: string | null
    userId?: string | null
    imageId: string
    artsCollectionsId?: ArtsCreateartsCollectionsIdInput | string[]
  }

  export type ArtsCreateOrConnectWithoutAuthorInput = {
    where: ArtsWhereUniqueInput
    create: XOR<ArtsCreateWithoutAuthorInput, ArtsUncheckedCreateWithoutAuthorInput>
  }

  export type ArtsUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ArtsWhereUniqueInput
    update: XOR<ArtsUpdateWithoutAuthorInput, ArtsUncheckedUpdateWithoutAuthorInput>
    create: XOR<ArtsCreateWithoutAuthorInput, ArtsUncheckedCreateWithoutAuthorInput>
  }

  export type ArtsUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ArtsWhereUniqueInput
    data: XOR<ArtsUpdateWithoutAuthorInput, ArtsUncheckedUpdateWithoutAuthorInput>
  }

  export type ArtsUpdateManyWithWhereWithoutAuthorInput = {
    where: ArtsScalarWhereInput
    data: XOR<ArtsUpdateManyMutationInput, ArtsUncheckedUpdateManyWithoutAuthorInput>
  }

  export type ImageCreateWithoutArtsInput = {
    id?: string
    url: string
  }

  export type ImageUncheckedCreateWithoutArtsInput = {
    id?: string
    url: string
  }

  export type ImageCreateOrConnectWithoutArtsInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutArtsInput, ImageUncheckedCreateWithoutArtsInput>
  }

  export type AuthorCreateWithoutArtsInput = {
    id?: string
    firstname: string
    lastname?: string | null
  }

  export type AuthorUncheckedCreateWithoutArtsInput = {
    id?: string
    firstname: string
    lastname?: string | null
    artsId?: AuthorCreateartsIdInput | string[]
  }

  export type AuthorCreateOrConnectWithoutArtsInput = {
    where: AuthorWhereUniqueInput
    create: XOR<AuthorCreateWithoutArtsInput, AuthorUncheckedCreateWithoutArtsInput>
  }

  export type UserCreateWithoutFavoritesArtsInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    password: string
    username?: string | null
    bio?: string | null
    dob?: Date | string | null
    collections?: ArtsCollectionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavoritesArtsInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    password: string
    username?: string | null
    bio?: string | null
    dob?: Date | string | null
    collections?: ArtsCollectionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavoritesArtsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoritesArtsInput, UserUncheckedCreateWithoutFavoritesArtsInput>
  }

  export type ArtsCollectionsCreateWithoutArtsInput = {
    id?: string
    artsId: string
    User: UserCreateNestedOneWithoutCollectionsInput
  }

  export type ArtsCollectionsUncheckedCreateWithoutArtsInput = {
    id?: string
    userId: string
    artsId: string
  }

  export type ArtsCollectionsCreateOrConnectWithoutArtsInput = {
    where: ArtsCollectionsWhereUniqueInput
    create: XOR<ArtsCollectionsCreateWithoutArtsInput, ArtsCollectionsUncheckedCreateWithoutArtsInput>
  }

  export type ImageUpsertWithoutArtsInput = {
    update: XOR<ImageUpdateWithoutArtsInput, ImageUncheckedUpdateWithoutArtsInput>
    create: XOR<ImageCreateWithoutArtsInput, ImageUncheckedCreateWithoutArtsInput>
    where?: ImageWhereInput
  }

  export type ImageUpdateToOneWithWhereWithoutArtsInput = {
    where?: ImageWhereInput
    data: XOR<ImageUpdateWithoutArtsInput, ImageUncheckedUpdateWithoutArtsInput>
  }

  export type ImageUpdateWithoutArtsInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUncheckedUpdateWithoutArtsInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type AuthorUpsertWithWhereUniqueWithoutArtsInput = {
    where: AuthorWhereUniqueInput
    update: XOR<AuthorUpdateWithoutArtsInput, AuthorUncheckedUpdateWithoutArtsInput>
    create: XOR<AuthorCreateWithoutArtsInput, AuthorUncheckedCreateWithoutArtsInput>
  }

  export type AuthorUpdateWithWhereUniqueWithoutArtsInput = {
    where: AuthorWhereUniqueInput
    data: XOR<AuthorUpdateWithoutArtsInput, AuthorUncheckedUpdateWithoutArtsInput>
  }

  export type AuthorUpdateManyWithWhereWithoutArtsInput = {
    where: AuthorScalarWhereInput
    data: XOR<AuthorUpdateManyMutationInput, AuthorUncheckedUpdateManyWithoutArtsInput>
  }

  export type AuthorScalarWhereInput = {
    AND?: AuthorScalarWhereInput | AuthorScalarWhereInput[]
    OR?: AuthorScalarWhereInput[]
    NOT?: AuthorScalarWhereInput | AuthorScalarWhereInput[]
    id?: StringFilter<"Author"> | string
    firstname?: StringFilter<"Author"> | string
    lastname?: StringNullableFilter<"Author"> | string | null
    artsId?: StringNullableListFilter<"Author">
  }

  export type UserUpsertWithoutFavoritesArtsInput = {
    update: XOR<UserUpdateWithoutFavoritesArtsInput, UserUncheckedUpdateWithoutFavoritesArtsInput>
    create: XOR<UserCreateWithoutFavoritesArtsInput, UserUncheckedCreateWithoutFavoritesArtsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoritesArtsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoritesArtsInput, UserUncheckedUpdateWithoutFavoritesArtsInput>
  }

  export type UserUpdateWithoutFavoritesArtsInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    collections?: ArtsCollectionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoritesArtsInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    collections?: ArtsCollectionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ArtsCollectionsUpsertWithoutArtsInput = {
    update: XOR<ArtsCollectionsUpdateWithoutArtsInput, ArtsCollectionsUncheckedUpdateWithoutArtsInput>
    create: XOR<ArtsCollectionsCreateWithoutArtsInput, ArtsCollectionsUncheckedCreateWithoutArtsInput>
    where?: ArtsCollectionsWhereInput
  }

  export type ArtsCollectionsUpdateToOneWithWhereWithoutArtsInput = {
    where?: ArtsCollectionsWhereInput
    data: XOR<ArtsCollectionsUpdateWithoutArtsInput, ArtsCollectionsUncheckedUpdateWithoutArtsInput>
  }

  export type ArtsCollectionsUpdateWithoutArtsInput = {
    artsId?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutCollectionsNestedInput
  }

  export type ArtsCollectionsUncheckedUpdateWithoutArtsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    artsId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutCollectionsInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    password: string
    username?: string | null
    bio?: string | null
    dob?: Date | string | null
    favoritesArts?: ArtsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCollectionsInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    password: string
    username?: string | null
    bio?: string | null
    dob?: Date | string | null
    favoritesArts?: ArtsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCollectionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCollectionsInput, UserUncheckedCreateWithoutCollectionsInput>
  }

  export type ArtsCreateWithoutArtsCollectionsInput = {
    id?: string
    title?: string | null
    date: Date | string
    annotation?: string | null
    img: ImageCreateNestedOneWithoutArtsInput
    author?: AuthorCreateNestedManyWithoutArtsInput
    User?: UserCreateNestedOneWithoutFavoritesArtsInput
  }

  export type ArtsUncheckedCreateWithoutArtsCollectionsInput = {
    id?: string
    title?: string | null
    authorId?: ArtsCreateauthorIdInput | string[]
    date: Date | string
    annotation?: string | null
    userId?: string | null
    imageId: string
    author?: AuthorUncheckedCreateNestedManyWithoutArtsInput
  }

  export type ArtsCreateOrConnectWithoutArtsCollectionsInput = {
    where: ArtsWhereUniqueInput
    create: XOR<ArtsCreateWithoutArtsCollectionsInput, ArtsUncheckedCreateWithoutArtsCollectionsInput>
  }

  export type ArtsCreateManyArtsCollectionsInputEnvelope = {
    data: ArtsCreateManyArtsCollectionsInput | ArtsCreateManyArtsCollectionsInput[]
  }

  export type UserUpsertWithoutCollectionsInput = {
    update: XOR<UserUpdateWithoutCollectionsInput, UserUncheckedUpdateWithoutCollectionsInput>
    create: XOR<UserCreateWithoutCollectionsInput, UserUncheckedCreateWithoutCollectionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCollectionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCollectionsInput, UserUncheckedUpdateWithoutCollectionsInput>
  }

  export type UserUpdateWithoutCollectionsInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favoritesArts?: ArtsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCollectionsInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    favoritesArts?: ArtsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ArtsUpsertWithWhereUniqueWithoutArtsCollectionsInput = {
    where: ArtsWhereUniqueInput
    update: XOR<ArtsUpdateWithoutArtsCollectionsInput, ArtsUncheckedUpdateWithoutArtsCollectionsInput>
    create: XOR<ArtsCreateWithoutArtsCollectionsInput, ArtsUncheckedCreateWithoutArtsCollectionsInput>
  }

  export type ArtsUpdateWithWhereUniqueWithoutArtsCollectionsInput = {
    where: ArtsWhereUniqueInput
    data: XOR<ArtsUpdateWithoutArtsCollectionsInput, ArtsUncheckedUpdateWithoutArtsCollectionsInput>
  }

  export type ArtsUpdateManyWithWhereWithoutArtsCollectionsInput = {
    where: ArtsScalarWhereInput
    data: XOR<ArtsUpdateManyMutationInput, ArtsUncheckedUpdateManyWithoutArtsCollectionsInput>
  }

  export type ArtsCreateManyUserInput = {
    id?: string
    title?: string | null
    authorId?: ArtsCreateauthorIdInput | string[]
    date: Date | string
    annotation?: string | null
    imageId: string
    artsCollectionsId?: ArtsCreateartsCollectionsIdInput | string[]
  }

  export type ArtsCollectionsCreateManyUserInput = {
    id?: string
    artsId: string
  }

  export type ArtsUpdateWithoutUserInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    annotation?: NullableStringFieldUpdateOperationsInput | string | null
    img?: ImageUpdateOneRequiredWithoutArtsNestedInput
    author?: AuthorUpdateManyWithoutArtsNestedInput
    ArtsCollections?: ArtsCollectionsUpdateOneRequiredWithoutArtsNestedInput
  }

  export type ArtsUncheckedUpdateWithoutUserInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: ArtsUpdateauthorIdInput | string[]
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    annotation?: NullableStringFieldUpdateOperationsInput | string | null
    imageId?: StringFieldUpdateOperationsInput | string
    artsCollectionsId?: ArtsUpdateartsCollectionsIdInput | string[]
    author?: AuthorUncheckedUpdateManyWithoutArtsNestedInput
  }

  export type ArtsUncheckedUpdateManyWithoutUserInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: ArtsUpdateauthorIdInput | string[]
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    annotation?: NullableStringFieldUpdateOperationsInput | string | null
    imageId?: StringFieldUpdateOperationsInput | string
    artsCollectionsId?: ArtsUpdateartsCollectionsIdInput | string[]
  }

  export type ArtsCollectionsUpdateWithoutUserInput = {
    artsId?: StringFieldUpdateOperationsInput | string
    arts?: ArtsUpdateManyWithoutArtsCollectionsNestedInput
  }

  export type ArtsCollectionsUncheckedUpdateWithoutUserInput = {
    artsId?: StringFieldUpdateOperationsInput | string
    arts?: ArtsUncheckedUpdateManyWithoutArtsCollectionsNestedInput
  }

  export type ArtsCollectionsUncheckedUpdateManyWithoutUserInput = {
    artsId?: StringFieldUpdateOperationsInput | string
  }

  export type ArtsCreateManyImgInput = {
    id?: string
    title?: string | null
    authorId?: ArtsCreateauthorIdInput | string[]
    date: Date | string
    annotation?: string | null
    userId?: string | null
    artsCollectionsId?: ArtsCreateartsCollectionsIdInput | string[]
  }

  export type ArtsUpdateWithoutImgInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    annotation?: NullableStringFieldUpdateOperationsInput | string | null
    author?: AuthorUpdateManyWithoutArtsNestedInput
    User?: UserUpdateOneWithoutFavoritesArtsNestedInput
    ArtsCollections?: ArtsCollectionsUpdateOneRequiredWithoutArtsNestedInput
  }

  export type ArtsUncheckedUpdateWithoutImgInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: ArtsUpdateauthorIdInput | string[]
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    annotation?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    artsCollectionsId?: ArtsUpdateartsCollectionsIdInput | string[]
    author?: AuthorUncheckedUpdateManyWithoutArtsNestedInput
  }

  export type ArtsUncheckedUpdateManyWithoutImgInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: ArtsUpdateauthorIdInput | string[]
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    annotation?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    artsCollectionsId?: ArtsUpdateartsCollectionsIdInput | string[]
  }

  export type ArtsUpdateWithoutAuthorInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    annotation?: NullableStringFieldUpdateOperationsInput | string | null
    img?: ImageUpdateOneRequiredWithoutArtsNestedInput
    User?: UserUpdateOneWithoutFavoritesArtsNestedInput
    ArtsCollections?: ArtsCollectionsUpdateOneRequiredWithoutArtsNestedInput
  }

  export type ArtsUncheckedUpdateWithoutAuthorInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: ArtsUpdateauthorIdInput | string[]
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    annotation?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    imageId?: StringFieldUpdateOperationsInput | string
    artsCollectionsId?: ArtsUpdateartsCollectionsIdInput | string[]
  }

  export type ArtsUncheckedUpdateManyWithoutAuthorInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: ArtsUpdateauthorIdInput | string[]
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    annotation?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    imageId?: StringFieldUpdateOperationsInput | string
    artsCollectionsId?: ArtsUpdateartsCollectionsIdInput | string[]
  }

  export type AuthorUpdateWithoutArtsInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthorUncheckedUpdateWithoutArtsInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    artsId?: AuthorUpdateartsIdInput | string[]
  }

  export type AuthorUncheckedUpdateManyWithoutArtsInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    artsId?: AuthorUpdateartsIdInput | string[]
  }

  export type ArtsCreateManyArtsCollectionsInput = {
    id?: string
    title?: string | null
    authorId?: ArtsCreateauthorIdInput | string[]
    date: Date | string
    annotation?: string | null
    userId?: string | null
    imageId: string
  }

  export type ArtsUpdateWithoutArtsCollectionsInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    annotation?: NullableStringFieldUpdateOperationsInput | string | null
    img?: ImageUpdateOneRequiredWithoutArtsNestedInput
    author?: AuthorUpdateManyWithoutArtsNestedInput
    User?: UserUpdateOneWithoutFavoritesArtsNestedInput
  }

  export type ArtsUncheckedUpdateWithoutArtsCollectionsInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: ArtsUpdateauthorIdInput | string[]
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    annotation?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    imageId?: StringFieldUpdateOperationsInput | string
    author?: AuthorUncheckedUpdateManyWithoutArtsNestedInput
  }

  export type ArtsUncheckedUpdateManyWithoutArtsCollectionsInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    authorId?: ArtsUpdateauthorIdInput | string[]
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    annotation?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    imageId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}